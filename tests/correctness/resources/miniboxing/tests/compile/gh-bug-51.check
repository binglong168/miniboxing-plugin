Miniboxing plugin warning: The two-way transformation (with long and double as storage types) has become default in version 0.4 version of the miniboxing plugin, so there is no need to specify it in the command line
Miniboxing plugin warning: Optimizing `MbArray`s, tuples and functions can only be done if you allow the plugin to use both long and double encodings (remove the `P:minibox:Yone-way` compiler option). In this run, the above classes will be generic and will box.
[Now checking: minibox-inject]
[Now checking: minibox-bridge]
[Not checkable: minibox-coerce]
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile.bug51 {
  abstract trait C[@miniboxed T] extends Object {
    <stable> <accessor> <paramaccessor> def t(): T;
    <stable> <accessor> def t$J(T$TypeTag: Byte): Long;
    def foo[@miniboxed U](u: U): Boolean;
    def foo$n$J[U](U$TypeTag: Byte, u: Long): Boolean
  };
  class C$J[Tsp] extends Object with miniboxing.tests.compile.bug51.C[Tsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|bug51|C$J|T$TypeTag: Byte = _;
    <paramaccessor> private[this] val t: Long = _;
    <stable> <accessor> <paramaccessor> def t(): Tsp = MiniboxConversions.this.minibox2box[Tsp](C$J.this.t$J(C$J.this.miniboxing|tests|compile|bug51|C$J|T$TypeTag), C$J.this.miniboxing|tests|compile|bug51|C$J|T$TypeTag);
    <stable> <accessor> def t$J(T$TypeTag: Byte): Long = C$J.this.t;
    def <init>(miniboxing|tests|compile|bug51|C$J|T$TypeTag: Byte, t: Long): miniboxing.tests.compile.bug51.C$J[Tsp] = {
      C$J.super.<init>();
      ()
    };
    def foo[@miniboxed U](u: U): Boolean = MiniboxDispatch.this.mboxed_eqeq_other(C$J.this.t$J(C$J.this.miniboxing|tests|compile|bug51|C$J|T$TypeTag), C$J.this.miniboxing|tests|compile|bug51|C$J|T$TypeTag, u);
    def foo$n$J[U](U$TypeTag: Byte, u: Long): Boolean = MiniboxDispatch.this.mboxed_eqeq_tag(C$J.this.t$J(C$J.this.miniboxing|tests|compile|bug51|C$J|T$TypeTag), C$J.this.miniboxing|tests|compile|bug51|C$J|T$TypeTag, u, U$TypeTag)
  };
  class C$L[Tsp] extends Object with miniboxing.tests.compile.bug51.C[Tsp] {
    <paramaccessor> private[this] val t: Tsp = _;
    <stable> <accessor> <paramaccessor> def t(): Tsp = C$L.this.t;
    <stable> <accessor> def t$J(T$TypeTag: Byte): Long = MiniboxConversions.this.box2minibox_tt[Tsp](C$L.this.t(), T$TypeTag);
    def <init>(t: Tsp): miniboxing.tests.compile.bug51.C$L[Tsp] = {
      C$L.super.<init>();
      ()
    };
    def foo[@miniboxed U](u: U): Boolean = C$L.this.t().==(u);
    def foo$n$J[U](U$TypeTag: Byte, u: Long): Boolean = C$L.this.t().==(MiniboxConversions.this.minibox2box[U](u, U$TypeTag))
  }
}
[Now checking: minibox-commit]