[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile.bug122 {
  abstract trait C[@miniboxed X] extends Object with miniboxing.tests.compile.bug122.B[Long] {
    <stable> <accessor> def neutralElement(): Long;
    def aggregate(a: Long, b: Long): Long
  };
  class C$D[Xsp] extends miniboxing.tests.compile.bug122.B$J[Long] with miniboxing.tests.compile.bug122.C[Xsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|bug122|C$D|X$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|bug122|C$D|X$TypeTag: Byte): miniboxing.tests.compile.bug122.C$D[Xsp] = {
      C$D.super.<init>(6);
      ()
    };
    private[this] val neutralElement: Long = 0L;
    <stable> <accessor> def neutralElement(): Long = C$D.this.neutralElement;
    override def neutralElement$J(T$TypeTag: Byte): Long = MiniboxConversions.this.long2minibox(C$D.this.neutralElement());
    def aggregate(a: Long, b: Long): Long = a.+(b);
    override def aggregate$J(T$TypeTag: Byte, a: Long, b: Long): Long = MiniboxConversions.this.long2minibox(C$D.this.aggregate(MiniboxConversions.this.minibox2long(a), MiniboxConversions.this.minibox2long(b)))
  };
  class C$J[Xsp] extends miniboxing.tests.compile.bug122.B$J[Long] with miniboxing.tests.compile.bug122.C[Xsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|bug122|C$J|X$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|bug122|C$J|X$TypeTag: Byte): miniboxing.tests.compile.bug122.C$J[Xsp] = {
      C$J.super.<init>(6);
      ()
    };
    private[this] val neutralElement: Long = 0L;
    <stable> <accessor> def neutralElement(): Long = C$J.this.neutralElement;
    override def neutralElement$J(T$TypeTag: Byte): Long = MiniboxConversions.this.long2minibox(C$J.this.neutralElement());
    def aggregate(a: Long, b: Long): Long = a.+(b);
    override def aggregate$J(T$TypeTag: Byte, a: Long, b: Long): Long = MiniboxConversions.this.long2minibox(C$J.this.aggregate(MiniboxConversions.this.minibox2long(a), MiniboxConversions.this.minibox2long(b)))
  };
  class C$L[Xsp] extends miniboxing.tests.compile.bug122.B$J[Long] with miniboxing.tests.compile.bug122.C[Xsp] {
    def <init>(): miniboxing.tests.compile.bug122.C$L[Xsp] = {
      C$L.super.<init>(6);
      ()
    };
    private[this] val neutralElement: Long = 0L;
    <stable> <accessor> def neutralElement(): Long = C$L.this.neutralElement;
    override def neutralElement$J(T$TypeTag: Byte): Long = MiniboxConversions.this.long2minibox(C$L.this.neutralElement());
    def aggregate(a: Long, b: Long): Long = a.+(b);
    override def aggregate$J(T$TypeTag: Byte, a: Long, b: Long): Long = MiniboxConversions.this.long2minibox(C$L.this.aggregate(MiniboxConversions.this.minibox2long(a), MiniboxConversions.this.minibox2long(b)))
  };
  abstract trait B[@miniboxed T] extends Object {
    def aggregate(a: T, b: T): T;
    def aggregate$D(T$TypeTag: Byte, a: Double, b: Double): Double;
    def aggregate$J(T$TypeTag: Byte, a: Long, b: Long): Long;
    def neutralElement(): T;
    def neutralElement$D(T$TypeTag: Byte): Double;
    def neutralElement$J(T$TypeTag: Byte): Long
  };
  abstract class B$D[Tsp] extends Object with miniboxing.tests.compile.bug122.B[Tsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|bug122|B$D|T$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|bug122|B$D|T$TypeTag: Byte): miniboxing.tests.compile.bug122.B$D[Tsp] = {
      B$D.super.<init>();
      ()
    };
    def aggregate(a: Tsp, b: Tsp): Tsp = MiniboxConversionsDouble.this.minibox2box[Tsp](B$D.this.aggregate$D(B$D.this.miniboxing|tests|compile|bug122|B$D|T$TypeTag, MiniboxConversionsDouble.this.box2minibox_tt[Tsp](a, B$D.this.miniboxing|tests|compile|bug122|B$D|T$TypeTag), MiniboxConversionsDouble.this.box2minibox_tt[Tsp](b, B$D.this.miniboxing|tests|compile|bug122|B$D|T$TypeTag)), B$D.this.miniboxing|tests|compile|bug122|B$D|T$TypeTag);
    def aggregate$D(T$TypeTag: Byte, a: Double, b: Double): Double;
    def aggregate$J(T$TypeTag: Byte, a: Long, b: Long): Long = MiniboxConversions.this.unreachableConversion[Nothing]("Double", "Long");
    def neutralElement(): Tsp = MiniboxConversionsDouble.this.minibox2box[Tsp](B$D.this.neutralElement$D(B$D.this.miniboxing|tests|compile|bug122|B$D|T$TypeTag), B$D.this.miniboxing|tests|compile|bug122|B$D|T$TypeTag);
    def neutralElement$D(T$TypeTag: Byte): Double;
    def neutralElement$J(T$TypeTag: Byte): Long = MiniboxConversions.this.unreachableConversion[Nothing]("Double", "Long")
  };
  abstract class B$J[Tsp] extends Object with miniboxing.tests.compile.bug122.B[Tsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|bug122|B$J|T$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|bug122|B$J|T$TypeTag: Byte): miniboxing.tests.compile.bug122.B$J[Tsp] = {
      B$J.super.<init>();
      ()
    };
    def aggregate(a: Tsp, b: Tsp): Tsp = MiniboxConversionsLong.this.minibox2box[Tsp](B$J.this.aggregate$J(B$J.this.miniboxing|tests|compile|bug122|B$J|T$TypeTag, MiniboxConversionsLong.this.box2minibox_tt[Tsp](a, B$J.this.miniboxing|tests|compile|bug122|B$J|T$TypeTag), MiniboxConversionsLong.this.box2minibox_tt[Tsp](b, B$J.this.miniboxing|tests|compile|bug122|B$J|T$TypeTag)), B$J.this.miniboxing|tests|compile|bug122|B$J|T$TypeTag);
    def aggregate$D(T$TypeTag: Byte, a: Double, b: Double): Double = MiniboxConversions.this.unreachableConversion[Nothing]("Long", "Double");
    def aggregate$J(T$TypeTag: Byte, a: Long, b: Long): Long;
    def neutralElement(): Tsp = MiniboxConversionsLong.this.minibox2box[Tsp](B$J.this.neutralElement$J(B$J.this.miniboxing|tests|compile|bug122|B$J|T$TypeTag), B$J.this.miniboxing|tests|compile|bug122|B$J|T$TypeTag);
    def neutralElement$D(T$TypeTag: Byte): Double = MiniboxConversions.this.unreachableConversion[Nothing]("Long", "Double");
    def neutralElement$J(T$TypeTag: Byte): Long
  };
  abstract class B$L[Tsp] extends Object with miniboxing.tests.compile.bug122.B[Tsp] {
    def <init>(): miniboxing.tests.compile.bug122.B$L[Tsp] = {
      B$L.super.<init>();
      ()
    };
    def aggregate(a: Tsp, b: Tsp): Tsp;
    def aggregate$D(T$TypeTag: Byte, a: Double, b: Double): Double = MiniboxConversionsDouble.this.box2minibox_tt[Tsp](B$L.this.aggregate(MiniboxConversionsDouble.this.minibox2box[Tsp](a, T$TypeTag), MiniboxConversionsDouble.this.minibox2box[Tsp](b, T$TypeTag)), T$TypeTag);
    def aggregate$J(T$TypeTag: Byte, a: Long, b: Long): Long = MiniboxConversionsLong.this.box2minibox_tt[Tsp](B$L.this.aggregate(MiniboxConversionsLong.this.minibox2box[Tsp](a, T$TypeTag), MiniboxConversionsLong.this.minibox2box[Tsp](b, T$TypeTag)), T$TypeTag);
    def neutralElement(): Tsp;
    def neutralElement$D(T$TypeTag: Byte): Double = MiniboxConversionsDouble.this.box2minibox_tt[Tsp](B$L.this.neutralElement(), T$TypeTag);
    def neutralElement$J(T$TypeTag: Byte): Long = MiniboxConversionsLong.this.box2minibox_tt[Tsp](B$L.this.neutralElement(), T$TypeTag)
  }
}