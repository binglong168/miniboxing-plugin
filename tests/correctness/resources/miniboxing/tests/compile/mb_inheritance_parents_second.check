Miniboxing plugin warning: Optimizing `MbArray`s, tuples and functions can only be done if you allow the plugin to use both long and double encodings (remove the `P:minibox:Yone-way` compiler option). In this run, the above classes will be generic and will box.
Specializing class CC...
  // interface:
  abstract trait CC[T] extends Object {
  }
  // specialized class:
  class CC$J[Tsp] extends CC[Tsp] {
    def <init>(val miniboxing|tests|compile|inheritance|CC$J|T$TypeTag: Byte): miniboxing.tests.compile.inheritance.CC$J[Tsp] // is a specialized implementation of constructor CC
    private[this] val miniboxing|tests|compile|inheritance|CC$J|T$TypeTag: Byte // is a type tag
  }
  // specialized class:
  class CC$L[Tsp] extends CC[Tsp] {
    def <init>(): miniboxing.tests.compile.inheritance.CC$L[Tsp]           // is a specialized implementation of constructor CC
  }
[Now checking: minibox-inject]
[Now checking: minibox-bridge]
[Not checkable: minibox-coerce]
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile.inheritance {
  abstract trait CC[@miniboxed T] extends Object;
  class CC$J[Tsp] extends Object with miniboxing.tests.compile.inheritance.CC[Tsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|inheritance|CC$J|T$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|inheritance|CC$J|T$TypeTag: Byte): miniboxing.tests.compile.inheritance.CC$J[Tsp] = {
      CC$J.super.<init>();
      ()
    }
  };
  class CC$L[Tsp] extends Object with miniboxing.tests.compile.inheritance.CC[Tsp] {
    def <init>(): miniboxing.tests.compile.inheritance.CC$L[Tsp] = {
      CC$L.super.<init>();
      ()
    }
  };
  class DC[U] extends miniboxing.tests.compile.inheritance.CC$L[U] {
    def <init>(): miniboxing.tests.compile.inheritance.DC[U] = {
      DC.super.<init>();
      ()
    }
  }
}
[Now checking: minibox-commit]