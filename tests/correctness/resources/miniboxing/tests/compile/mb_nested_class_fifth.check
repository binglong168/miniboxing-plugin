Miniboxing plugin warning: Optimizing `MbArray`s, tuples and functions can only be done if you allow the plugin to use both long and double encodings (remove the `P:minibox:Yone-way` compiler option). In this run, the above classes will be generic and will box.
Specializing class CCCCC...
  // interface:
  abstract trait CCCCC[T] extends Object {
    def test$J(val T$TypeTag: Byte): Unit
    def test(): Unit
  }
  // specialized class:
  class CCCCC$J[Tsp] extends CCCCC[Tsp] {
    def <init>(val miniboxing|tests|compile|nested|CCCCC$J|T$TypeTag: Byte,c: Tsp @storage[Long]): miniboxing.tests.compile.nested.CCCCC$J[Tsp] // is a specialized implementation of constructor CCCCC
    def test$J(val T$TypeTag: Byte): Unit                                  // is a specialized implementation of method test
    def test(): Unit                                                       // is a forwarder to the specialized member
    private[this] val c: Tsp @storage[Long]                                // is a specialized implementation of value c
    private[this] val miniboxing|tests|compile|nested|CCCCC$J|T$TypeTag: Byte // is a type tag
  }
  // specialized class:
  class CCCCC$L[Tsp] extends CCCCC[Tsp] {
    def <init>(c: Tsp): miniboxing.tests.compile.nested.CCCCC$L[Tsp]       // is a specialized implementation of constructor CCCCC
    def test$J(val T$TypeTag: Byte): Unit                                  // is a forwarder to the specialized member
    def test(): Unit                                                       // is a specialized implementation of method test
    private[this] val c: Tsp                                               // is a specialized implementation of value c
  }
newSource1.scala:94: warning: The value x1 cannot have its signature minibox-transformed as it becomes part of class DDDDD, which allows outer code to call and/or override it. If you don't use it outside this class, you can make it private and miniboxing will be allowed to specialize it:
      val x1: T = c
          ^
[Now checking: minibox-inject]
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile.nested {
  abstract trait CCCCC[@miniboxed T] extends Object {
    def test(): Unit;
    def test$J(T$TypeTag: Byte): Unit
  };
  class CCCCC$J[Tsp] extends Object with miniboxing.tests.compile.nested.CCCCC[Tsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|nested|CCCCC$J|T$TypeTag: Byte = _;
    <paramaccessor> private[this] val c: Long = _;
    def <init>(miniboxing|tests|compile|nested|CCCCC$J|T$TypeTag: Byte, c: Long): miniboxing.tests.compile.nested.CCCCC$J[Tsp] = {
      CCCCC$J.super.<init>();
      ()
    };
    def test(): Unit = CCCCC$J.this.test$J(CCCCC$J.this.miniboxing|tests|compile|nested|CCCCC$J|T$TypeTag);
    def test$J(T$TypeTag: Byte): Unit = {
      class DDDDD[U] extends Object {
        <paramaccessor> private[this] val d: U = _;
        def <init>(d: U): DDDDD[U] = {
          DDDDD.super.<init>();
          ()
        };
        private[this] val x1: Long = CCCCC$J.this.c;
        <stable> <accessor> def x1(): Tsp = MiniboxConversions.this.minibox2box[Tsp](DDDDD.this.x1, T$TypeTag);
        private[this] val x2: U = DDDDD.this.d;
        <stable> <accessor> def x2(): U = DDDDD.this.x2;
        def foo(): Unit = {
          val x3: Long = CCCCC$J.this.c;
          val x4: U = DDDDD.this.d;
          scala.this.Predef.println(DDDDD.this.x1().==(DDDDD.this.x2()));
          scala.this.Predef.println(MiniboxDispatch.this.mboxed_eqeq_other(x3, T$TypeTag, x4))
        }
      };
      new DDDDD[Tsp](MiniboxConversions.this.minibox2box[Tsp](CCCCC$J.this.c, T$TypeTag)).foo()
    }
  };
  class CCCCC$L[Tsp] extends Object with miniboxing.tests.compile.nested.CCCCC[Tsp] {
    <paramaccessor> private[this] val c: Tsp = _;
    def <init>(c: Tsp): miniboxing.tests.compile.nested.CCCCC$L[Tsp] = {
      CCCCC$L.super.<init>();
      ()
    };
    def test(): Unit = {
      class DDDDD[U] extends Object {
        <paramaccessor> private[this] val d: U = _;
        def <init>(d: U): DDDDD[U] = {
          DDDDD.super.<init>();
          ()
        };
        private[this] val x1: Tsp = CCCCC$L.this.c;
        <stable> <accessor> def x1(): Tsp = DDDDD.this.x1;
        private[this] val x2: U = DDDDD.this.d;
        <stable> <accessor> def x2(): U = DDDDD.this.x2;
        def foo(): Unit = {
          val x3: Tsp = CCCCC$L.this.c;
          val x4: U = DDDDD.this.d;
          scala.this.Predef.println(DDDDD.this.x1().==(DDDDD.this.x2()));
          scala.this.Predef.println(x3.==(x4))
        }
      };
      new DDDDD[Tsp](CCCCC$L.this.c).foo()
    };
    def test$J(T$TypeTag: Byte): Unit = CCCCC$L.this.test()
  }
}
[Now checking: minibox-commit]