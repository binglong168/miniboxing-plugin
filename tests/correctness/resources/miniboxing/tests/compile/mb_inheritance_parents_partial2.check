Miniboxing plugin warning: Optimizing `MbArray`s, tuples and functions can only be done if you allow the plugin to use both long and double encodings (remove the `P:minibox:Yone-way` compiler option). In this run, the above classes will be generic and will box.
Specializing class FF1...
  // interface:
  abstract trait FF1[T, R] extends Object {
  }
  // specialized class:
  class FF1$JJ[Tsp, Rsp] extends FF1[Tsp,Rsp] {
    def <init>(val miniboxing|tests|compile|inheritance|FF1$JJ|T$TypeTag: Byte,val miniboxing|tests|compile|inheritance|FF1$JJ|R$TypeTag: Byte): miniboxing.tests.compile.inheritance.FF1$JJ[Tsp,Rsp] // is a specialized implementation of constructor FF1
    private[this] val miniboxing|tests|compile|inheritance|FF1$JJ|R$TypeTag: Byte // is a type tag
    private[this] val miniboxing|tests|compile|inheritance|FF1$JJ|T$TypeTag: Byte // is a type tag
  }
  // specialized class:
  class FF1$LJ[Tsp, Rsp] extends FF1[Tsp,Rsp] {
    def <init>(val miniboxing|tests|compile|inheritance|FF1$LJ|R$TypeTag: Byte): miniboxing.tests.compile.inheritance.FF1$LJ[Tsp,Rsp] // is a specialized implementation of constructor FF1
    private[this] val miniboxing|tests|compile|inheritance|FF1$LJ|R$TypeTag: Byte // is a type tag
  }
  // specialized class:
  class FF1$JL[Tsp, Rsp] extends FF1[Tsp,Rsp] {
    def <init>(val miniboxing|tests|compile|inheritance|FF1$JL|T$TypeTag: Byte): miniboxing.tests.compile.inheritance.FF1$JL[Tsp,Rsp] // is a specialized implementation of constructor FF1
    private[this] val miniboxing|tests|compile|inheritance|FF1$JL|T$TypeTag: Byte // is a type tag
  }
  // specialized class:
  class FF1$LL[Tsp, Rsp] extends FF1[Tsp,Rsp] {
    def <init>(): miniboxing.tests.compile.inheritance.FF1$LL[Tsp,Rsp]     // is a specialized implementation of constructor FF1
  }
Specializing class PPredicate...
  // interface:
  abstract trait PPredicate[T] extends FF1[T,Int] {
  }
  // specialized class:
  class PPredicate$J[Tsp] extends FF1$JJ[Tsp,Int] with PPredicate[Tsp] {
    def <init>(val miniboxing|tests|compile|inheritance|PPredicate$J|T$TypeTag: Byte): miniboxing.tests.compile.inheritance.PPredicate$J[Tsp] // is a specialized implementation of constructor PPredicate
    private[this] val miniboxing|tests|compile|inheritance|PPredicate$J|T$TypeTag: Byte // is a type tag
  }
  // specialized class:
  class PPredicate$L[Tsp] extends FF1$LJ[Tsp,Int] with PPredicate[Tsp] {
    def <init>(): miniboxing.tests.compile.inheritance.PPredicate$L[Tsp]   // is a specialized implementation of constructor PPredicate
  }
[Now checking: minibox-inject]
[Now checking: minibox-bridge]
[Not checkable: minibox-coerce]
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile.inheritance {
  abstract trait FF1[@miniboxed T, @miniboxed R] extends Object;
  class FF1$JJ[Tsp, Rsp] extends Object with miniboxing.tests.compile.inheritance.FF1[Tsp,Rsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|inheritance|FF1$JJ|R$TypeTag: Byte = _;
    <paramaccessor> private[this] val miniboxing|tests|compile|inheritance|FF1$JJ|T$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|inheritance|FF1$JJ|T$TypeTag: Byte, miniboxing|tests|compile|inheritance|FF1$JJ|R$TypeTag: Byte): miniboxing.tests.compile.inheritance.FF1$JJ[Tsp,Rsp] = {
      FF1$JJ.super.<init>();
      ()
    }
  };
  class FF1$JL[Tsp, Rsp] extends Object with miniboxing.tests.compile.inheritance.FF1[Tsp,Rsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|inheritance|FF1$JL|T$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|inheritance|FF1$JL|T$TypeTag: Byte): miniboxing.tests.compile.inheritance.FF1$JL[Tsp,Rsp] = {
      FF1$JL.super.<init>();
      ()
    }
  };
  class FF1$LJ[Tsp, Rsp] extends Object with miniboxing.tests.compile.inheritance.FF1[Tsp,Rsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|inheritance|FF1$LJ|R$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|inheritance|FF1$LJ|R$TypeTag: Byte): miniboxing.tests.compile.inheritance.FF1$LJ[Tsp,Rsp] = {
      FF1$LJ.super.<init>();
      ()
    }
  };
  class FF1$LL[Tsp, Rsp] extends Object with miniboxing.tests.compile.inheritance.FF1[Tsp,Rsp] {
    def <init>(): miniboxing.tests.compile.inheritance.FF1$LL[Tsp,Rsp] = {
      FF1$LL.super.<init>();
      ()
    }
  };
  abstract trait PPredicate[@miniboxed T] extends Object;
  class PPredicate$J[Tsp] extends miniboxing.tests.compile.inheritance.FF1$JJ[Tsp,Int] with miniboxing.tests.compile.inheritance.PPredicate[Tsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|inheritance|PPredicate$J|T$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|inheritance|PPredicate$J|T$TypeTag: Byte): miniboxing.tests.compile.inheritance.PPredicate$J[Tsp] = {
      PPredicate$J.super.<init>(miniboxing|tests|compile|inheritance|PPredicate$J|T$TypeTag, 5);
      ()
    }
  };
  class PPredicate$L[Tsp] extends miniboxing.tests.compile.inheritance.FF1$LJ[Tsp,Int] with miniboxing.tests.compile.inheritance.PPredicate[Tsp] {
    def <init>(): miniboxing.tests.compile.inheritance.PPredicate$L[Tsp] = {
      PPredicate$L.super.<init>(5);
      ()
    }
  }
}
[Now checking: minibox-commit]