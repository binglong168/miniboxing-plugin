Miniboxing plugin warning: Optimizing `MbArray`s, tuples and functions can only be done if you allow the plugin to use both long and double encodings (remove the `P:minibox:Yone-way` compiler option). In this run, the above classes will be generic and will box.
[Now checking: minibox-inject]
[Now checking: minibox-bridge]
[Not checkable: minibox-coerce]
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile {
  abstract trait CCC[@miniboxed T] extends Object {
    <stable> <accessor> <paramaccessor> def t(): T;
    <stable> <accessor> def t$J(T$TypeTag: Byte): Long;
    def foo(t1: T, t2: Any): String;
    def foo$J(T$TypeTag: Byte, t1: Long, t2: Any): String
  };
  class CCC$J[Tsp] extends Object with miniboxing.tests.compile.CCC[Tsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|CCC$J|T$TypeTag: Byte = _;
    <paramaccessor> private[this] val t: Long = _;
    <stable> <accessor> <paramaccessor> def t(): Tsp = MiniboxConversions.this.minibox2box[Tsp](CCC$J.this.t$J(CCC$J.this.miniboxing|tests|compile|CCC$J|T$TypeTag), CCC$J.this.miniboxing|tests|compile|CCC$J|T$TypeTag);
    <stable> <accessor> def t$J(T$TypeTag: Byte): Long = CCC$J.this.t;
    def <init>(miniboxing|tests|compile|CCC$J|T$TypeTag: Byte, t: Long): miniboxing.tests.compile.CCC$J[Tsp] = {
      CCC$J.super.<init>();
      ()
    };
    def foo(t1: Tsp, t2: Any): String = CCC$J.this.foo$J(CCC$J.this.miniboxing|tests|compile|CCC$J|T$TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](t1, CCC$J.this.miniboxing|tests|compile|CCC$J|T$TypeTag), t2);
    def foo$J(T$TypeTag: Byte, t1: Long, t2: Any): String = {
      MiniboxDispatch.this.mboxed_hashCode(CCC$J.this.t$J(T$TypeTag), T$TypeTag);
      MiniboxDispatch.this.mboxed_eqeq_notag(CCC$J.this.t$J(T$TypeTag), t1);
      MiniboxDispatch.this.mboxed_eqeq_other(CCC$J.this.t$J(T$TypeTag), T$TypeTag, t2);
      MiniboxDispatch.this.mboxed_toString(CCC$J.this.t$J(T$TypeTag), T$TypeTag)
    }
  };
  class CCC$L[Tsp] extends Object with miniboxing.tests.compile.CCC[Tsp] {
    <paramaccessor> private[this] val t: Tsp = _;
    <stable> <accessor> <paramaccessor> def t(): Tsp = CCC$L.this.t;
    <stable> <accessor> def t$J(T$TypeTag: Byte): Long = MiniboxConversions.this.box2minibox_tt[Tsp](CCC$L.this.t(), T$TypeTag);
    def <init>(t: Tsp): miniboxing.tests.compile.CCC$L[Tsp] = {
      CCC$L.super.<init>();
      ()
    };
    def foo(t1: Tsp, t2: Any): String = {
      CCC$L.this.t().hashCode();
      CCC$L.this.t().==(t1);
      CCC$L.this.t().==(t2);
      CCC$L.this.t().toString()
    };
    def foo$J(T$TypeTag: Byte, t1: Long, t2: Any): String = CCC$L.this.foo(MiniboxConversions.this.minibox2box[Tsp](t1, T$TypeTag), t2)
  }
}
[Now checking: minibox-commit]