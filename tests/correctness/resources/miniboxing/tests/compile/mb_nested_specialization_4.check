newSource1.scala:8: warning: The method foo cannot have its signature minibox-transformed as it becomes part of class F, which allows outer code to call and/or override it. If you don't use it outside this class, you can make it private and miniboxing will be allowed to specialize it:
      def foo[@miniboxed V](s: S, v: V) = {
          ^
[[syntax trees at end of            minibox-inject]] // newSource1.scala
package miniboxing.tests.compile.nested_rewiring.test4 {
  abstract trait C[@miniboxed T, @miniboxed U] extends Object;
  class C$JJ[Tsp, Usp] extends Object with miniboxing.tests.compile.nested_rewiring.test4.C[Tsp,Usp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|nested_rewiring|test4|C$JJ|T$TypeTag: Byte = _;
    <paramaccessor> private[this] val miniboxing|tests|compile|nested_rewiring|test4|C$JJ|U$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|nested_rewiring|test4|C$JJ|T$TypeTag: Byte, miniboxing|tests|compile|nested_rewiring|test4|C$JJ|U$TypeTag: Byte): miniboxing.tests.compile.nested_rewiring.test4.C$JJ[Tsp,Usp] = {
      C$JJ.super.<init>();
      ()
    }
  };
  class C$JL[Tsp, Usp] extends Object with miniboxing.tests.compile.nested_rewiring.test4.C[Tsp,Usp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|nested_rewiring|test4|C$JL|T$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|nested_rewiring|test4|C$JL|T$TypeTag: Byte): miniboxing.tests.compile.nested_rewiring.test4.C$JL[Tsp,Usp] = {
      C$JL.super.<init>();
      ()
    }
  };
  class C$LJ[Tsp, Usp] extends Object with miniboxing.tests.compile.nested_rewiring.test4.C[Tsp,Usp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|nested_rewiring|test4|C$LJ|U$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|nested_rewiring|test4|C$LJ|U$TypeTag: Byte): miniboxing.tests.compile.nested_rewiring.test4.C$LJ[Tsp,Usp] = {
      C$LJ.super.<init>();
      ()
    }
  };
  class C$LL[Tsp, Usp] extends Object with miniboxing.tests.compile.nested_rewiring.test4.C[Tsp,Usp] {
    def <init>(): miniboxing.tests.compile.nested_rewiring.test4.C$LL[Tsp,Usp] = {
      C$LL.super.<init>();
      ()
    }
  };
  abstract trait D[@miniboxed S] extends Object {
    def bar(): Nothing
  };
  class D$J[Ssp] extends Object with miniboxing.tests.compile.nested_rewiring.test4.D[Ssp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|nested_rewiring|test4|D$J|S$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|nested_rewiring|test4|D$J|S$TypeTag: Byte): miniboxing.tests.compile.nested_rewiring.test4.D$J[Ssp] = {
      D$J.super.<init>();
      ()
    };
    def bar(): Nothing = {
      class F extends Object {
        def <init>(): F = {
          F.super.<init>();
          ()
        };
        def foo[@miniboxed V](s: Ssp, v: V): miniboxing.tests.compile.nested_rewiring.test4.C[Ssp,V] = {
          def zoo(): miniboxing.tests.compile.nested_rewiring.test4.C[Ssp,V] = {
            class Z extends miniboxing.tests.compile.nested_rewiring.test4.C$JL[Ssp,V] {
              def <init>(): Z = {
                Z.super.<init>(D$J.this.miniboxing|tests|compile|nested_rewiring|test4|D$J|S$TypeTag);
                ()
              }
            };
            new Z()
          };
          zoo()
        };
        def foo$n$J[V](V$TypeTag: Byte, s: Ssp, v: V @storage[Long]): miniboxing.tests.compile.nested_rewiring.test4.C[Ssp,V] = {
          def zoo(): miniboxing.tests.compile.nested_rewiring.test4.C[Ssp,V] = {
            class Z extends miniboxing.tests.compile.nested_rewiring.test4.C$JJ[Ssp,V] {
              def <init>(): Z = {
                Z.super.<init>(D$J.this.miniboxing|tests|compile|nested_rewiring|test4|D$J|S$TypeTag, V$TypeTag);
                ()
              }
            };
            new Z()
          };
          zoo()
        }
      };
      scala.this.Predef.???()
    }
  };
  class D$L[Ssp] extends Object with miniboxing.tests.compile.nested_rewiring.test4.D[Ssp] {
    def <init>(): miniboxing.tests.compile.nested_rewiring.test4.D$L[Ssp] = {
      D$L.super.<init>();
      ()
    };
    def bar(): Nothing = {
      class F extends Object {
        def <init>(): F = {
          F.super.<init>();
          ()
        };
        def foo[@miniboxed V](s: Ssp, v: V): miniboxing.tests.compile.nested_rewiring.test4.C[Ssp,V] = {
          def zoo(): miniboxing.tests.compile.nested_rewiring.test4.C[Ssp,V] = {
            class Z extends miniboxing.tests.compile.nested_rewiring.test4.C$LL[Ssp,V] {
              def <init>(): Z = {
                Z.super.<init>();
                ()
              }
            };
            new Z()
          };
          zoo()
        };
        def foo$n$J[V](V$TypeTag: Byte, s: Ssp, v: V @storage[Long]): miniboxing.tests.compile.nested_rewiring.test4.C[Ssp,V] = {
          def zoo(): miniboxing.tests.compile.nested_rewiring.test4.C[Ssp,V] = {
            class Z extends miniboxing.tests.compile.nested_rewiring.test4.C$LJ[Ssp,V] {
              def <init>(): Z = {
                Z.super.<init>(V$TypeTag);
                ()
              }
            };
            new Z()
          };
          zoo()
        }
      };
      scala.this.Predef.???()
    }
  }
}
Miniboxing plugin warning: Optimizing `MbArray` is only possible if you allow the plugin to use both long and double encodings (remove `P:minibox:Yone-way` compiler option). `MbArray`-s will be generic and will box.
Miniboxing plugin warning: Optimizing `MbTuple` is only possible if you allow the plugin to use both long and double encodings (remove `P:minibox:Yone-way` compiler option). `MbTuple`-s will be generic and will box.