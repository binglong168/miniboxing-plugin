Miniboxing plugin warning: Optimizing `MbArray`s, tuples and functions can only be done if you allow the plugin to use both long and double encodings (remove the `P:minibox:Yone-way` compiler option). In this run, the above classes will be generic and will box.
[Now checking: minibox-inject]
[Now checking: minibox-bridge]
[Not checkable: minibox-coerce]
[Now checking: minibox-commit]
[[syntax trees at end of                specialize]] // newSource1.scala
package miniboxing.tests.compile {
  abstract trait Base61[@miniboxed T, @miniboxed S] extends Object {
    def overrideMe[@miniboxed C](t1: T, t2: T, s: S, c: C): T;
    def overrideMe$n$J[C](C$TypeTag: Byte, t1: T, t2: T, s: S, c: Long): T;
    def overrideMe$JJ[@miniboxed C](T$TypeTag: Byte, S$TypeTag: Byte, t1: Long, t2: Long, s: Long, c: C): Long;
    def overrideMe$JJ$n$J[C](C$TypeTag: Byte, T$TypeTag: Byte, S$TypeTag: Byte, t1: Long, t2: Long, s: Long, c: Long): Long;
    def overrideMe$JL[@miniboxed C](T$TypeTag: Byte, t1: Long, t2: Long, s: S, c: C): Long;
    def overrideMe$JL$n$J[C](C$TypeTag: Byte, T$TypeTag: Byte, t1: Long, t2: Long, s: S, c: Long): Long;
    def overrideMe$LJ[@miniboxed C](S$TypeTag: Byte, t1: T, t2: T, s: Long, c: C): T;
    def overrideMe$LJ$n$J[C](C$TypeTag: Byte, S$TypeTag: Byte, t1: T, t2: T, s: Long, c: Long): T
  };
  class Base61$JJ[Tsp, Ssp] extends Object with miniboxing.tests.compile.Base61[Tsp,Ssp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|Base61$JJ|S$TypeTag: Byte = _;
    <paramaccessor> private[this] val miniboxing|tests|compile|Base61$JJ|T$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|Base61$JJ|T$TypeTag: Byte, miniboxing|tests|compile|Base61$JJ|S$TypeTag: Byte): miniboxing.tests.compile.Base61$JJ[Tsp,Ssp] = {
      Base61$JJ.super.<init>();
      ()
    };
    def overrideMe[@miniboxed C](t1: Tsp, t2: Tsp, s: Ssp, c: C): Tsp = MiniboxConversions.this.minibox2box[Tsp](Base61$JJ.this.overrideMe$JJ[C](Base61$JJ.this.miniboxing|tests|compile|Base61$JJ|T$TypeTag, Base61$JJ.this.miniboxing|tests|compile|Base61$JJ|S$TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](t1, Base61$JJ.this.miniboxing|tests|compile|Base61$JJ|T$TypeTag), MiniboxConversions.this.box2minibox_tt[Tsp](t2, Base61$JJ.this.miniboxing|tests|compile|Base61$JJ|T$TypeTag), MiniboxConversions.this.box2minibox_tt[Ssp](s, Base61$JJ.this.miniboxing|tests|compile|Base61$JJ|S$TypeTag), c), Base61$JJ.this.miniboxing|tests|compile|Base61$JJ|T$TypeTag);
    def overrideMe$n$J[C](C$TypeTag: Byte, t1: Tsp, t2: Tsp, s: Ssp, c: Long): Tsp = MiniboxConversions.this.minibox2box[Tsp](Base61$JJ.this.overrideMe$JJ$n$J[C](C$TypeTag, Base61$JJ.this.miniboxing|tests|compile|Base61$JJ|T$TypeTag, Base61$JJ.this.miniboxing|tests|compile|Base61$JJ|S$TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](t1, Base61$JJ.this.miniboxing|tests|compile|Base61$JJ|T$TypeTag), MiniboxConversions.this.box2minibox_tt[Tsp](t2, Base61$JJ.this.miniboxing|tests|compile|Base61$JJ|T$TypeTag), MiniboxConversions.this.box2minibox_tt[Ssp](s, Base61$JJ.this.miniboxing|tests|compile|Base61$JJ|S$TypeTag), c), Base61$JJ.this.miniboxing|tests|compile|Base61$JJ|T$TypeTag);
    def overrideMe$JJ[@miniboxed C](T$TypeTag: Byte, S$TypeTag: Byte, t1: Long, t2: Long, s: Long, c: C): Long = t1;
    def overrideMe$JJ$n$J[C](C$TypeTag: Byte, T$TypeTag: Byte, S$TypeTag: Byte, t1: Long, t2: Long, s: Long, c: Long): Long = t1;
    def overrideMe$JL[@miniboxed C](T$TypeTag: Byte, t1: Long, t2: Long, s: Ssp, c: C): Long = Base61$JJ.this.overrideMe$JJ[C](T$TypeTag, Base61$JJ.this.miniboxing|tests|compile|Base61$JJ|S$TypeTag, t1, t2, MiniboxConversions.this.box2minibox_tt[Ssp](s, Base61$JJ.this.miniboxing|tests|compile|Base61$JJ|S$TypeTag), c);
    def overrideMe$JL$n$J[C](C$TypeTag: Byte, T$TypeTag: Byte, t1: Long, t2: Long, s: Ssp, c: Long): Long = Base61$JJ.this.overrideMe$JJ$n$J[C](C$TypeTag, T$TypeTag, Base61$JJ.this.miniboxing|tests|compile|Base61$JJ|S$TypeTag, t1, t2, MiniboxConversions.this.box2minibox_tt[Ssp](s, Base61$JJ.this.miniboxing|tests|compile|Base61$JJ|S$TypeTag), c);
    def overrideMe$LJ[@miniboxed C](S$TypeTag: Byte, t1: Tsp, t2: Tsp, s: Long, c: C): Tsp = MiniboxConversions.this.minibox2box[Tsp](Base61$JJ.this.overrideMe$JJ[C](Base61$JJ.this.miniboxing|tests|compile|Base61$JJ|T$TypeTag, S$TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](t1, Base61$JJ.this.miniboxing|tests|compile|Base61$JJ|T$TypeTag), MiniboxConversions.this.box2minibox_tt[Tsp](t2, Base61$JJ.this.miniboxing|tests|compile|Base61$JJ|T$TypeTag), s, c), Base61$JJ.this.miniboxing|tests|compile|Base61$JJ|T$TypeTag);
    def overrideMe$LJ$n$J[C](C$TypeTag: Byte, S$TypeTag: Byte, t1: Tsp, t2: Tsp, s: Long, c: Long): Tsp = MiniboxConversions.this.minibox2box[Tsp](Base61$JJ.this.overrideMe$JJ$n$J[C](C$TypeTag, Base61$JJ.this.miniboxing|tests|compile|Base61$JJ|T$TypeTag, S$TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](t1, Base61$JJ.this.miniboxing|tests|compile|Base61$JJ|T$TypeTag), MiniboxConversions.this.box2minibox_tt[Tsp](t2, Base61$JJ.this.miniboxing|tests|compile|Base61$JJ|T$TypeTag), s, c), Base61$JJ.this.miniboxing|tests|compile|Base61$JJ|T$TypeTag)
  };
  class Base61$JL[Tsp, Ssp] extends Object with miniboxing.tests.compile.Base61[Tsp,Ssp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|Base61$JL|T$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|Base61$JL|T$TypeTag: Byte): miniboxing.tests.compile.Base61$JL[Tsp,Ssp] = {
      Base61$JL.super.<init>();
      ()
    };
    def overrideMe[@miniboxed C](t1: Tsp, t2: Tsp, s: Ssp, c: C): Tsp = MiniboxConversions.this.minibox2box[Tsp](Base61$JL.this.overrideMe$JL[C](Base61$JL.this.miniboxing|tests|compile|Base61$JL|T$TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](t1, Base61$JL.this.miniboxing|tests|compile|Base61$JL|T$TypeTag), MiniboxConversions.this.box2minibox_tt[Tsp](t2, Base61$JL.this.miniboxing|tests|compile|Base61$JL|T$TypeTag), s, c), Base61$JL.this.miniboxing|tests|compile|Base61$JL|T$TypeTag);
    def overrideMe$n$J[C](C$TypeTag: Byte, t1: Tsp, t2: Tsp, s: Ssp, c: Long): Tsp = MiniboxConversions.this.minibox2box[Tsp](Base61$JL.this.overrideMe$JL$n$J[C](C$TypeTag, Base61$JL.this.miniboxing|tests|compile|Base61$JL|T$TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](t1, Base61$JL.this.miniboxing|tests|compile|Base61$JL|T$TypeTag), MiniboxConversions.this.box2minibox_tt[Tsp](t2, Base61$JL.this.miniboxing|tests|compile|Base61$JL|T$TypeTag), s, c), Base61$JL.this.miniboxing|tests|compile|Base61$JL|T$TypeTag);
    def overrideMe$JJ[@miniboxed C](T$TypeTag: Byte, S$TypeTag: Byte, t1: Long, t2: Long, s: Long, c: C): Long = Base61$JL.this.overrideMe$JL[C](T$TypeTag, t1, t2, MiniboxConversions.this.minibox2box[Ssp](s, S$TypeTag), c);
    def overrideMe$JJ$n$J[C](C$TypeTag: Byte, T$TypeTag: Byte, S$TypeTag: Byte, t1: Long, t2: Long, s: Long, c: Long): Long = Base61$JL.this.overrideMe$JL$n$J[C](C$TypeTag, T$TypeTag, t1, t2, MiniboxConversions.this.minibox2box[Ssp](s, S$TypeTag), c);
    def overrideMe$JL[@miniboxed C](T$TypeTag: Byte, t1: Long, t2: Long, s: Ssp, c: C): Long = t1;
    def overrideMe$JL$n$J[C](C$TypeTag: Byte, T$TypeTag: Byte, t1: Long, t2: Long, s: Ssp, c: Long): Long = t1;
    def overrideMe$LJ[@miniboxed C](S$TypeTag: Byte, t1: Tsp, t2: Tsp, s: Long, c: C): Tsp = MiniboxConversions.this.minibox2box[Tsp](Base61$JL.this.overrideMe$JL[C](Base61$JL.this.miniboxing|tests|compile|Base61$JL|T$TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](t1, Base61$JL.this.miniboxing|tests|compile|Base61$JL|T$TypeTag), MiniboxConversions.this.box2minibox_tt[Tsp](t2, Base61$JL.this.miniboxing|tests|compile|Base61$JL|T$TypeTag), MiniboxConversions.this.minibox2box[Ssp](s, S$TypeTag), c), Base61$JL.this.miniboxing|tests|compile|Base61$JL|T$TypeTag);
    def overrideMe$LJ$n$J[C](C$TypeTag: Byte, S$TypeTag: Byte, t1: Tsp, t2: Tsp, s: Long, c: Long): Tsp = MiniboxConversions.this.minibox2box[Tsp](Base61$JL.this.overrideMe$JL$n$J[C](C$TypeTag, Base61$JL.this.miniboxing|tests|compile|Base61$JL|T$TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](t1, Base61$JL.this.miniboxing|tests|compile|Base61$JL|T$TypeTag), MiniboxConversions.this.box2minibox_tt[Tsp](t2, Base61$JL.this.miniboxing|tests|compile|Base61$JL|T$TypeTag), MiniboxConversions.this.minibox2box[Ssp](s, S$TypeTag), c), Base61$JL.this.miniboxing|tests|compile|Base61$JL|T$TypeTag)
  };
  class Base61$LJ[Tsp, Ssp] extends Object with miniboxing.tests.compile.Base61[Tsp,Ssp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|Base61$LJ|S$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|Base61$LJ|S$TypeTag: Byte): miniboxing.tests.compile.Base61$LJ[Tsp,Ssp] = {
      Base61$LJ.super.<init>();
      ()
    };
    def overrideMe[@miniboxed C](t1: Tsp, t2: Tsp, s: Ssp, c: C): Tsp = Base61$LJ.this.overrideMe$LJ[C](Base61$LJ.this.miniboxing|tests|compile|Base61$LJ|S$TypeTag, t1, t2, MiniboxConversions.this.box2minibox_tt[Ssp](s, Base61$LJ.this.miniboxing|tests|compile|Base61$LJ|S$TypeTag), c);
    def overrideMe$n$J[C](C$TypeTag: Byte, t1: Tsp, t2: Tsp, s: Ssp, c: Long): Tsp = Base61$LJ.this.overrideMe$LJ$n$J[C](C$TypeTag, Base61$LJ.this.miniboxing|tests|compile|Base61$LJ|S$TypeTag, t1, t2, MiniboxConversions.this.box2minibox_tt[Ssp](s, Base61$LJ.this.miniboxing|tests|compile|Base61$LJ|S$TypeTag), c);
    def overrideMe$JJ[@miniboxed C](T$TypeTag: Byte, S$TypeTag: Byte, t1: Long, t2: Long, s: Long, c: C): Long = MiniboxConversions.this.box2minibox_tt[Tsp](Base61$LJ.this.overrideMe$LJ[C](S$TypeTag, MiniboxConversions.this.minibox2box[Tsp](t1, T$TypeTag), MiniboxConversions.this.minibox2box[Tsp](t2, T$TypeTag), s, c), T$TypeTag);
    def overrideMe$JJ$n$J[C](C$TypeTag: Byte, T$TypeTag: Byte, S$TypeTag: Byte, t1: Long, t2: Long, s: Long, c: Long): Long = MiniboxConversions.this.box2minibox_tt[Tsp](Base61$LJ.this.overrideMe$LJ$n$J[C](C$TypeTag, S$TypeTag, MiniboxConversions.this.minibox2box[Tsp](t1, T$TypeTag), MiniboxConversions.this.minibox2box[Tsp](t2, T$TypeTag), s, c), T$TypeTag);
    def overrideMe$JL[@miniboxed C](T$TypeTag: Byte, t1: Long, t2: Long, s: Ssp, c: C): Long = MiniboxConversions.this.box2minibox_tt[Tsp](Base61$LJ.this.overrideMe$LJ[C](Base61$LJ.this.miniboxing|tests|compile|Base61$LJ|S$TypeTag, MiniboxConversions.this.minibox2box[Tsp](t1, T$TypeTag), MiniboxConversions.this.minibox2box[Tsp](t2, T$TypeTag), MiniboxConversions.this.box2minibox_tt[Ssp](s, Base61$LJ.this.miniboxing|tests|compile|Base61$LJ|S$TypeTag), c), T$TypeTag);
    def overrideMe$JL$n$J[C](C$TypeTag: Byte, T$TypeTag: Byte, t1: Long, t2: Long, s: Ssp, c: Long): Long = MiniboxConversions.this.box2minibox_tt[Tsp](Base61$LJ.this.overrideMe$LJ$n$J[C](C$TypeTag, Base61$LJ.this.miniboxing|tests|compile|Base61$LJ|S$TypeTag, MiniboxConversions.this.minibox2box[Tsp](t1, T$TypeTag), MiniboxConversions.this.minibox2box[Tsp](t2, T$TypeTag), MiniboxConversions.this.box2minibox_tt[Ssp](s, Base61$LJ.this.miniboxing|tests|compile|Base61$LJ|S$TypeTag), c), T$TypeTag);
    def overrideMe$LJ[@miniboxed C](S$TypeTag: Byte, t1: Tsp, t2: Tsp, s: Long, c: C): Tsp = t1;
    def overrideMe$LJ$n$J[C](C$TypeTag: Byte, S$TypeTag: Byte, t1: Tsp, t2: Tsp, s: Long, c: Long): Tsp = t1
  };
  class Base61$LL[Tsp, Ssp] extends Object with miniboxing.tests.compile.Base61[Tsp,Ssp] {
    def <init>(): miniboxing.tests.compile.Base61$LL[Tsp,Ssp] = {
      Base61$LL.super.<init>();
      ()
    };
    def overrideMe[@miniboxed C](t1: Tsp, t2: Tsp, s: Ssp, c: C): Tsp = t1;
    def overrideMe$n$J[C](C$TypeTag: Byte, t1: Tsp, t2: Tsp, s: Ssp, c: Long): Tsp = t1;
    def overrideMe$JJ[@miniboxed C](T$TypeTag: Byte, S$TypeTag: Byte, t1: Long, t2: Long, s: Long, c: C): Long = MiniboxConversions.this.box2minibox_tt[Tsp](Base61$LL.this.overrideMe[C](MiniboxConversions.this.minibox2box[Tsp](t1, T$TypeTag), MiniboxConversions.this.minibox2box[Tsp](t2, T$TypeTag), MiniboxConversions.this.minibox2box[Ssp](s, S$TypeTag), c), T$TypeTag);
    def overrideMe$JJ$n$J[C](C$TypeTag: Byte, T$TypeTag: Byte, S$TypeTag: Byte, t1: Long, t2: Long, s: Long, c: Long): Long = MiniboxConversions.this.box2minibox_tt[Tsp](Base61$LL.this.overrideMe$n$J[C](C$TypeTag, MiniboxConversions.this.minibox2box[Tsp](t1, T$TypeTag), MiniboxConversions.this.minibox2box[Tsp](t2, T$TypeTag), MiniboxConversions.this.minibox2box[Ssp](s, S$TypeTag), c), T$TypeTag);
    def overrideMe$JL[@miniboxed C](T$TypeTag: Byte, t1: Long, t2: Long, s: Ssp, c: C): Long = MiniboxConversions.this.box2minibox_tt[Tsp](Base61$LL.this.overrideMe[C](MiniboxConversions.this.minibox2box[Tsp](t1, T$TypeTag), MiniboxConversions.this.minibox2box[Tsp](t2, T$TypeTag), s, c), T$TypeTag);
    def overrideMe$JL$n$J[C](C$TypeTag: Byte, T$TypeTag: Byte, t1: Long, t2: Long, s: Ssp, c: Long): Long = MiniboxConversions.this.box2minibox_tt[Tsp](Base61$LL.this.overrideMe$n$J[C](C$TypeTag, MiniboxConversions.this.minibox2box[Tsp](t1, T$TypeTag), MiniboxConversions.this.minibox2box[Tsp](t2, T$TypeTag), s, c), T$TypeTag);
    def overrideMe$LJ[@miniboxed C](S$TypeTag: Byte, t1: Tsp, t2: Tsp, s: Long, c: C): Tsp = Base61$LL.this.overrideMe[C](t1, t2, MiniboxConversions.this.minibox2box[Ssp](s, S$TypeTag), c);
    def overrideMe$LJ$n$J[C](C$TypeTag: Byte, S$TypeTag: Byte, t1: Tsp, t2: Tsp, s: Long, c: Long): Tsp = Base61$LL.this.overrideMe$n$J[C](C$TypeTag, t1, t2, MiniboxConversions.this.minibox2box[Ssp](s, S$TypeTag), c)
  };
  abstract trait Base62[@miniboxed T, S] extends Object {
    override def overrideMe[@miniboxed C](t1: T, t2: T, s: S, c: C): T;
    override def overrideMe$n$J[C](C$TypeTag: Byte, t1: T, t2: T, s: S, c: Long): T;
    override def overrideMe$J[@miniboxed C](T$TypeTag: Byte, t1: Long, t2: Long, s: S, c: C): Long;
    override def overrideMe$J$n$J[C](C$TypeTag: Byte, T$TypeTag: Byte, t1: Long, t2: Long, s: S, c: Long): Long
  };
  class Base62$J[Tsp, Ssp] extends miniboxing.tests.compile.Base61$JL[Tsp,Ssp] with miniboxing.tests.compile.Base62[Tsp,Ssp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|Base62$J|T$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|Base62$J|T$TypeTag: Byte): miniboxing.tests.compile.Base62$J[Tsp,Ssp] = {
      Base62$J.super.<init>(miniboxing|tests|compile|Base62$J|T$TypeTag);
      ()
    };
    override def overrideMe[@miniboxed C](t1: Tsp, t2: Tsp, s: Ssp, c: C): Tsp = MiniboxConversions.this.minibox2box[Tsp](Base62$J.this.overrideMe$J[C](Base62$J.this.miniboxing|tests|compile|Base62$J|T$TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](t1, Base62$J.this.miniboxing|tests|compile|Base62$J|T$TypeTag), MiniboxConversions.this.box2minibox_tt[Tsp](t2, Base62$J.this.miniboxing|tests|compile|Base62$J|T$TypeTag), s, c), Base62$J.this.miniboxing|tests|compile|Base62$J|T$TypeTag);
    override def overrideMe$n$J[C](C$TypeTag: Byte, t1: Tsp, t2: Tsp, s: Ssp, c: Long): Tsp = MiniboxConversions.this.minibox2box[Tsp](Base62$J.this.overrideMe$J$n$J[C](C$TypeTag, Base62$J.this.miniboxing|tests|compile|Base62$J|T$TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](t1, Base62$J.this.miniboxing|tests|compile|Base62$J|T$TypeTag), MiniboxConversions.this.box2minibox_tt[Tsp](t2, Base62$J.this.miniboxing|tests|compile|Base62$J|T$TypeTag), s, c), Base62$J.this.miniboxing|tests|compile|Base62$J|T$TypeTag);
    override def overrideMe$J[@miniboxed C](T$TypeTag: Byte, t1: Long, t2: Long, s: Ssp, c: C): Long = t2;
    override def overrideMe$J$n$J[C](C$TypeTag: Byte, T$TypeTag: Byte, t1: Long, t2: Long, s: Ssp, c: Long): Long = t2
  };
  class Base62$L[Tsp, Ssp] extends miniboxing.tests.compile.Base61$LL[Tsp,Ssp] with miniboxing.tests.compile.Base62[Tsp,Ssp] {
    def <init>(): miniboxing.tests.compile.Base62$L[Tsp,Ssp] = {
      Base62$L.super.<init>();
      ()
    };
    override def overrideMe[@miniboxed C](t1: Tsp, t2: Tsp, s: Ssp, c: C): Tsp = t2;
    override def overrideMe$n$J[C](C$TypeTag: Byte, t1: Tsp, t2: Tsp, s: Ssp, c: Long): Tsp = t2;
    override def overrideMe$J[@miniboxed C](T$TypeTag: Byte, t1: Long, t2: Long, s: Ssp, c: C): Long = MiniboxConversions.this.box2minibox_tt[Tsp](Base62$L.this.overrideMe[C](MiniboxConversions.this.minibox2box[Tsp](t1, T$TypeTag), MiniboxConversions.this.minibox2box[Tsp](t2, T$TypeTag), s, c), T$TypeTag);
    override def overrideMe$J$n$J[C](C$TypeTag: Byte, T$TypeTag: Byte, t1: Long, t2: Long, s: Ssp, c: Long): Long = MiniboxConversions.this.box2minibox_tt[Tsp](Base62$L.this.overrideMe$n$J[C](C$TypeTag, MiniboxConversions.this.minibox2box[Tsp](t1, T$TypeTag), MiniboxConversions.this.minibox2box[Tsp](t2, T$TypeTag), s, c), T$TypeTag)
  }
}