Miniboxing plugin warning: Optimizing `MbArray`s, tuples and functions can only be done if you allow the plugin to use both long and double encodings (remove the `P:minibox:Yone-way` compiler option). In this run, the above classes will be generic and will box.
newSource1.scala:5: warning: The side-effecting statement(s) in the miniboxed class C's constructor will not be miniboxed. Please note this is caused by the fact that the miniboxing plugin was instructed not to specialize side-effecting constructor statements.
  t = t2
    ^
[Now checking: minibox-inject]
[Now checking: minibox-bridge]
[Not checkable: minibox-coerce]
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile.bug83.alt1 {
  abstract trait C[@miniboxed T] extends Object {
    <stable> <accessor> <paramaccessor> def t1(): T;
    <stable> <accessor> def t1$J(T$TypeTag: Byte): Long;
    <stable> <accessor> <paramaccessor> def t2(): T;
    <stable> <accessor> def t2$J(T$TypeTag: Byte): Long;
    <accessor> def t(): T;
    <accessor> def t$J(T$TypeTag: Byte): Long;
    <accessor> def t_=(x$1: T): Unit;
    <accessor> def t$J_=(T$TypeTag: Byte, x$1: Long): Unit;
    C.this.t_=(C.this.t2());
    scala.this.Predef.println(C.this.t())
  };
  class C$J[Tsp] extends Object with miniboxing.tests.compile.bug83.alt1.C[Tsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|bug83|alt1|C$J|T$TypeTag: Byte = _;
    <paramaccessor> private[this] val t1: Long = _;
    <stable> <accessor> <paramaccessor> def t1(): Tsp = MiniboxConversions.this.minibox2box[Tsp](C$J.this.t1$J(C$J.this.miniboxing|tests|compile|bug83|alt1|C$J|T$TypeTag), C$J.this.miniboxing|tests|compile|bug83|alt1|C$J|T$TypeTag);
    <stable> <accessor> def t1$J(T$TypeTag: Byte): Long = C$J.this.t1;
    <paramaccessor> private[this] val t2: Long = _;
    <stable> <accessor> <paramaccessor> def t2(): Tsp = MiniboxConversions.this.minibox2box[Tsp](C$J.this.t2$J(C$J.this.miniboxing|tests|compile|bug83|alt1|C$J|T$TypeTag), C$J.this.miniboxing|tests|compile|bug83|alt1|C$J|T$TypeTag);
    <stable> <accessor> def t2$J(T$TypeTag: Byte): Long = C$J.this.t2;
    def <init>(miniboxing|tests|compile|bug83|alt1|C$J|T$TypeTag: Byte, t1: Long, t2: Long): miniboxing.tests.compile.bug83.alt1.C$J[Tsp] = {
      C$J.super.<init>();
      ()
    };
    private[this] var t: Long = C$J.this.t1$J(C$J.this.miniboxing|tests|compile|bug83|alt1|C$J|T$TypeTag);
    <accessor> def t(): Tsp = MiniboxConversions.this.minibox2box[Tsp](C$J.this.t$J(C$J.this.miniboxing|tests|compile|bug83|alt1|C$J|T$TypeTag), C$J.this.miniboxing|tests|compile|bug83|alt1|C$J|T$TypeTag);
    <accessor> def t$J(T$TypeTag: Byte): Long = C$J.this.t;
    <accessor> def t_=(x$1: Tsp): Unit = C$J.this.t$J_=(C$J.this.miniboxing|tests|compile|bug83|alt1|C$J|T$TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](x$1, C$J.this.miniboxing|tests|compile|bug83|alt1|C$J|T$TypeTag));
    <accessor> def t$J_=(T$TypeTag: Byte, x$1: Long): Unit = C$J.this.t = x$1
  };
  class C$L[Tsp] extends Object with miniboxing.tests.compile.bug83.alt1.C[Tsp] {
    <paramaccessor> private[this] val t1: Tsp = _;
    <stable> <accessor> <paramaccessor> def t1(): Tsp = C$L.this.t1;
    <stable> <accessor> def t1$J(T$TypeTag: Byte): Long = MiniboxConversions.this.box2minibox_tt[Tsp](C$L.this.t1(), T$TypeTag);
    <paramaccessor> private[this] val t2: Tsp = _;
    <stable> <accessor> <paramaccessor> def t2(): Tsp = C$L.this.t2;
    <stable> <accessor> def t2$J(T$TypeTag: Byte): Long = MiniboxConversions.this.box2minibox_tt[Tsp](C$L.this.t2(), T$TypeTag);
    def <init>(t1: Tsp, t2: Tsp): miniboxing.tests.compile.bug83.alt1.C$L[Tsp] = {
      C$L.super.<init>();
      ()
    };
    private[this] var t: Tsp = C$L.this.t1();
    <accessor> def t(): Tsp = C$L.this.t;
    <accessor> def t$J(T$TypeTag: Byte): Long = MiniboxConversions.this.box2minibox_tt[Tsp](C$L.this.t(), T$TypeTag);
    <accessor> def t_=(x$1: Tsp): Unit = C$L.this.t = x$1;
    <accessor> def t$J_=(T$TypeTag: Byte, x$1: Long): Unit = C$L.this.t_=(MiniboxConversions.this.minibox2box[Tsp](x$1, T$TypeTag))
  };
  object Test extends Object {
    def <init>(): miniboxing.tests.compile.bug83.alt1.Test.type = {
      Test.super.<init>();
      ()
    };
    def main(args: Array[String]): Unit = {
      new miniboxing.tests.compile.bug83.alt1.C$J[Int](5, MiniboxConversions.this.int2minibox(1), MiniboxConversions.this.int2minibox(3));
      ()
    }
  }
}
[Now checking: minibox-commit]