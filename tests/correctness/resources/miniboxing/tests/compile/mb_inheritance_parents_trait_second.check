Miniboxing plugin warning: Optimizing `MbArray`s, tuples and functions can only be done if you allow the plugin to use both long and double encodings (remove the `P:minibox:Yone-way` compiler option). In this run, the above classes will be generic and will box.
Specializing trait CC...
  // interface:
  abstract trait CC[T] extends Object {
    def foo$J(val T$TypeTag: Byte,t: T @storage[Long]): T @storage[Long]
    def foo(t: T): T
  }
  // specialized class:
  abstract trait CC$J[Tsp] extends CC[Tsp] {
    def foo$J(val T$TypeTag: Byte,t: Tsp @storage[Long]): Tsp @storage[Long] // is a specialized implementation of method foo
    def foo(t: Tsp): Tsp                                                   // is a forwarder to the specialized member
    def miniboxing|tests|compile|inheritance|traits|CC$J|T$TypeTag(): Byte // is a type tag
  }
  // specialized class:
  abstract trait CC$L[Tsp] extends CC[Tsp] {
    def foo$J(val T$TypeTag: Byte,t: Tsp @storage[Long]): Tsp @storage[Long] // is a forwarder to the specialized member
    def foo(t: Tsp): Tsp                                                   // is a specialized implementation of method foo
  }
Specializing trait DD...
  // interface:
  abstract trait DD[T] extends CC[T] {
  }
  // specialized class:
  abstract trait DD$J[Tsp] extends CC$J[Tsp] with DD[Tsp] {
    def miniboxing|tests|compile|inheritance|traits|DD$J|T$TypeTag(): Byte // is a type tag
  }
  // specialized class:
  abstract trait DD$L[Tsp] extends CC$L[Tsp] with DD[Tsp] {
  }
Specializing class EE...
  // interface:
  abstract trait EE[T] extends DD[T] {
  }
  // specialized class:
  class EE$J[Tsp] extends DD$J[Tsp] with EE[Tsp] {
    def <init>(val miniboxing|tests|compile|inheritance|traits|EE$J|T$TypeTag: Byte): miniboxing.tests.compile.inheritance.traits.EE$J[Tsp] // is a specialized implementation of constructor EE
    def miniboxing|tests|compile|inheritance|traits|CC$J|T$TypeTag(): Byte // is the type tag of an inherited trait
    def miniboxing|tests|compile|inheritance|traits|DD$J|T$TypeTag(): Byte // is the type tag of an inherited trait
    private[this] val miniboxing|tests|compile|inheritance|traits|EE$J|T$TypeTag: Byte // is a type tag
  }
  // specialized class:
  class EE$L[Tsp] extends DD$L[Tsp] with EE[Tsp] {
    def <init>(): miniboxing.tests.compile.inheritance.traits.EE$L[Tsp]    // is a specialized implementation of constructor EE
  }
[Now checking: minibox-inject]
[Now checking: minibox-bridge]
[Not checkable: minibox-coerce]
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile.inheritance.traits {
  abstract trait CC[@miniboxed T] extends Object {
    def foo(t: T): T;
    def foo$J(T$TypeTag: Byte, t: Long): Long
  };
  abstract trait CC$J[Tsp] extends Object with miniboxing.tests.compile.inheritance.traits.CC[Tsp] {
    def miniboxing|tests|compile|inheritance|traits|CC$J|T$TypeTag(): Byte;
    def foo(t: Tsp): Tsp = MiniboxConversions.this.minibox2box[Tsp](CC$J.this.foo$J(CC$J.this.miniboxing|tests|compile|inheritance|traits|CC$J|T$TypeTag(), MiniboxConversions.this.box2minibox_tt[Tsp](t, CC$J.this.miniboxing|tests|compile|inheritance|traits|CC$J|T$TypeTag())), CC$J.this.miniboxing|tests|compile|inheritance|traits|CC$J|T$TypeTag());
    def foo$J(T$TypeTag: Byte, t: Long): Long = MiniboxConversions.this.box2minibox_tt[Tsp](scala.this.Predef.???(), T$TypeTag)
  };
  abstract trait CC$L[Tsp] extends Object with miniboxing.tests.compile.inheritance.traits.CC[Tsp] {
    def foo(t: Tsp): Tsp = scala.this.Predef.???();
    def foo$J(T$TypeTag: Byte, t: Long): Long = MiniboxConversions.this.box2minibox_tt[Tsp](CC$L.this.foo(MiniboxConversions.this.minibox2box[Tsp](t, T$TypeTag)), T$TypeTag)
  };
  abstract trait DD[@miniboxed T] extends Object with miniboxing.tests.compile.inheritance.traits.CC[T];
  abstract trait DD$J[Tsp] extends Object with miniboxing.tests.compile.inheritance.traits.CC$J[Tsp] with miniboxing.tests.compile.inheritance.traits.DD[Tsp] {
    def miniboxing|tests|compile|inheritance|traits|DD$J|T$TypeTag(): Byte
  };
  abstract trait DD$L[Tsp] extends Object with miniboxing.tests.compile.inheritance.traits.CC$L[Tsp] with miniboxing.tests.compile.inheritance.traits.DD[Tsp];
  abstract trait EE[@miniboxed T] extends Object with miniboxing.tests.compile.inheritance.traits.DD[T];
  class EE$J[Tsp] extends Object with miniboxing.tests.compile.inheritance.traits.DD$J[Tsp] with miniboxing.tests.compile.inheritance.traits.EE[Tsp] {
    def miniboxing|tests|compile|inheritance|traits|CC$J|T$TypeTag(): Byte = EE$J.this.miniboxing|tests|compile|inheritance|traits|EE$J|T$TypeTag;
    def miniboxing|tests|compile|inheritance|traits|DD$J|T$TypeTag(): Byte = EE$J.this.miniboxing|tests|compile|inheritance|traits|EE$J|T$TypeTag;
    <paramaccessor> private[this] val miniboxing|tests|compile|inheritance|traits|EE$J|T$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|inheritance|traits|EE$J|T$TypeTag: Byte): miniboxing.tests.compile.inheritance.traits.EE$J[Tsp] = {
      EE$J.super.<init>();
      ()
    }
  };
  class EE$L[Tsp] extends Object with miniboxing.tests.compile.inheritance.traits.DD$L[Tsp] with miniboxing.tests.compile.inheritance.traits.EE[Tsp] {
    def <init>(): miniboxing.tests.compile.inheritance.traits.EE$L[Tsp] = {
      EE$L.super.<init>();
      ()
    }
  };
  class FF extends Object with miniboxing.tests.compile.inheritance.traits.DD$J[Int] {
    def miniboxing|tests|compile|inheritance|traits|CC$J|T$TypeTag(): Byte = 5;
    def miniboxing|tests|compile|inheritance|traits|DD$J|T$TypeTag(): Byte = 5;
    def <init>(): miniboxing.tests.compile.inheritance.traits.FF = {
      FF.super.<init>();
      ()
    }
  }
}
[Now checking: minibox-commit]