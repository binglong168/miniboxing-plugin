Miniboxing plugin warning: Optimizing `MbArray`s, tuples and functions can only be done if you allow the plugin to use both long and double encodings (remove the `P:minibox:Yone-way` compiler option). In this run, the above classes will be generic and will box.
Specializing class MyTuple2...
  // interface:
  abstract trait MyTuple2[T1, T2] extends Object {
    val t1$JJ(val T1$TypeTag: Byte,val T2$TypeTag: Byte): T1 @storage[Long]
    val t1$JL(val T1$TypeTag: Byte): T1 @storage[Long]
    val t1$LJ(val T2$TypeTag: Byte): T1
    val t1(): T1
    val t2$JJ(val T1$TypeTag: Byte,val T2$TypeTag: Byte): T2 @storage[Long]
    val t2$JL(val T1$TypeTag: Byte): T2
    val t2$LJ(val T2$TypeTag: Byte): T2 @storage[Long]
    val t2(): T2
  }
  // specialized class:
  class MyTuple2$JJ[T1sp, T2sp] extends MyTuple2[T1sp,T2sp] {
    def <init>(val miniboxing|tests|compile|MyTuple2$JJ|T1$TypeTag: Byte,val miniboxing|tests|compile|MyTuple2$JJ|T2$TypeTag: Byte,t1: T1sp @storage[Long],t2: T2sp @storage[Long]): miniboxing.tests.compile.MyTuple2$JJ[T1sp,T2sp] // is a specialized implementation of constructor MyTuple2
    private[this] val miniboxing|tests|compile|MyTuple2$JJ|T1$TypeTag: Byte // is a type tag
    private[this] val miniboxing|tests|compile|MyTuple2$JJ|T2$TypeTag: Byte // is a type tag
    private[this] val t1: T1sp @storage[Long]                              // is a specialized implementation of value t1
    private[this] val t2: T2sp @storage[Long]                              // is a specialized implementation of value t2
    val t1$JJ(val T1$TypeTag: Byte,val T2$TypeTag: Byte): T1sp @storage[Long] // is a setter or getter for value t1
    val t1$JL(val T1$TypeTag: Byte): T1sp @storage[Long]                   // is a forwarder to the specialized member
    val t1$LJ(val T2$TypeTag: Byte): T1sp                                  // is a forwarder to the specialized member
    val t1(): T1sp                                                         // is a forwarder to the specialized member
    val t2$JJ(val T1$TypeTag: Byte,val T2$TypeTag: Byte): T2sp @storage[Long] // is a setter or getter for value t2
    val t2$JL(val T1$TypeTag: Byte): T2sp                                  // is a forwarder to the specialized member
    val t2$LJ(val T2$TypeTag: Byte): T2sp @storage[Long]                   // is a forwarder to the specialized member
    val t2(): T2sp                                                         // is a forwarder to the specialized member
  }
  // specialized class:
  class MyTuple2$LJ[T1sp, T2sp] extends MyTuple2[T1sp,T2sp] {
    def <init>(val miniboxing|tests|compile|MyTuple2$LJ|T2$TypeTag: Byte,t1: T1sp,t2: T2sp @storage[Long]): miniboxing.tests.compile.MyTuple2$LJ[T1sp,T2sp] // is a specialized implementation of constructor MyTuple2
    private[this] val miniboxing|tests|compile|MyTuple2$LJ|T2$TypeTag: Byte // is a type tag
    private[this] val t1: T1sp                                             // is a specialized implementation of value t1
    private[this] val t2: T2sp @storage[Long]                              // is a specialized implementation of value t2
    val t1$JJ(val T1$TypeTag: Byte,val T2$TypeTag: Byte): T1sp @storage[Long] // is a forwarder to the specialized member
    val t1$JL(val T1$TypeTag: Byte): T1sp @storage[Long]                   // is a forwarder to the specialized member
    val t1$LJ(val T2$TypeTag: Byte): T1sp                                  // is a setter or getter for value t1
    val t1(): T1sp                                                         // is a forwarder to the specialized member
    val t2$JJ(val T1$TypeTag: Byte,val T2$TypeTag: Byte): T2sp @storage[Long] // is a forwarder to the specialized member
    val t2$JL(val T1$TypeTag: Byte): T2sp                                  // is a forwarder to the specialized member
    val t2$LJ(val T2$TypeTag: Byte): T2sp @storage[Long]                   // is a setter or getter for value t2
    val t2(): T2sp                                                         // is a forwarder to the specialized member
  }
  // specialized class:
  class MyTuple2$JL[T1sp, T2sp] extends MyTuple2[T1sp,T2sp] {
    def <init>(val miniboxing|tests|compile|MyTuple2$JL|T1$TypeTag: Byte,t1: T1sp @storage[Long],t2: T2sp): miniboxing.tests.compile.MyTuple2$JL[T1sp,T2sp] // is a specialized implementation of constructor MyTuple2
    private[this] val miniboxing|tests|compile|MyTuple2$JL|T1$TypeTag: Byte // is a type tag
    private[this] val t1: T1sp @storage[Long]                              // is a specialized implementation of value t1
    private[this] val t2: T2sp                                             // is a specialized implementation of value t2
    val t1$JJ(val T1$TypeTag: Byte,val T2$TypeTag: Byte): T1sp @storage[Long] // is a forwarder to the specialized member
    val t1$JL(val T1$TypeTag: Byte): T1sp @storage[Long]                   // is a setter or getter for value t1
    val t1$LJ(val T2$TypeTag: Byte): T1sp                                  // is a forwarder to the specialized member
    val t1(): T1sp                                                         // is a forwarder to the specialized member
    val t2$JJ(val T1$TypeTag: Byte,val T2$TypeTag: Byte): T2sp @storage[Long] // is a forwarder to the specialized member
    val t2$JL(val T1$TypeTag: Byte): T2sp                                  // is a setter or getter for value t2
    val t2$LJ(val T2$TypeTag: Byte): T2sp @storage[Long]                   // is a forwarder to the specialized member
    val t2(): T2sp                                                         // is a forwarder to the specialized member
  }
  // specialized class:
  class MyTuple2$LL[T1sp, T2sp] extends MyTuple2[T1sp,T2sp] {
    def <init>(t1: T1sp,t2: T2sp): miniboxing.tests.compile.MyTuple2$LL[T1sp,T2sp] // is a specialized implementation of constructor MyTuple2
    private[this] val t1: T1sp                                             // is a specialized implementation of value t1
    private[this] val t2: T2sp                                             // is a specialized implementation of value t2
    val t1$JJ(val T1$TypeTag: Byte,val T2$TypeTag: Byte): T1sp @storage[Long] // is a forwarder to the specialized member
    val t1$JL(val T1$TypeTag: Byte): T1sp @storage[Long]                   // is a forwarder to the specialized member
    val t1$LJ(val T2$TypeTag: Byte): T1sp                                  // is a forwarder to the specialized member
    val t1(): T1sp                                                         // is a setter or getter for value t1
    val t2$JJ(val T1$TypeTag: Byte,val T2$TypeTag: Byte): T2sp @storage[Long] // is a forwarder to the specialized member
    val t2$JL(val T1$TypeTag: Byte): T2sp                                  // is a forwarder to the specialized member
    val t2$LJ(val T2$TypeTag: Byte): T2sp @storage[Long]                   // is a forwarder to the specialized member
    val t2(): T2sp                                                         // is a setter or getter for value t2
  }
[Now checking: minibox-inject]
[Now checking: minibox-bridge]
[Not checkable: minibox-coerce]
[Now checking: minibox-commit]