Miniboxing plugin warning: Optimizing `MbArray`s, tuples and functions can only be done if you allow the plugin to use both long and double encodings (remove the `P:minibox:Yone-way` compiler option). In this run, the above classes will be generic and will box.
Specializing class TN...
  // interface:
  abstract trait TN[T, X] extends Object {
    def foo$J(val T$TypeTag: Byte): miniboxing.tests.compile.tparams.TN[T,String]
    def foo(): miniboxing.tests.compile.tparams.TN[T,String]
    val t$J(val T$TypeTag: Byte): T @storage[Long]
    val t(): T
  }
  // specialized class:
  class TN$J[Tsp, Xsp] extends TN[Tsp,Xsp] {
    def <init>(val miniboxing|tests|compile|tparams|TN$J|T$TypeTag: Byte,t: Tsp @storage[Long]): miniboxing.tests.compile.tparams.TN$J[Tsp,Xsp] // is a specialized implementation of constructor TN
    def foo$J(val T$TypeTag: Byte): miniboxing.tests.compile.tparams.TN[Tsp,String] // is a specialized implementation of method foo
    def foo(): miniboxing.tests.compile.tparams.TN[Tsp,String]             // is a forwarder to the specialized member
    private[this] val miniboxing|tests|compile|tparams|TN$J|T$TypeTag: Byte // is a type tag
    private[this] val t: Tsp @storage[Long]                                // is a specialized implementation of value t
    val t$J(val T$TypeTag: Byte): Tsp @storage[Long]                       // is a setter or getter for value t
    val t(): Tsp                                                           // is a forwarder to the specialized member
  }
  // specialized class:
  class TN$L[Tsp, Xsp] extends TN[Tsp,Xsp] {
    def <init>(t: Tsp): miniboxing.tests.compile.tparams.TN$L[Tsp,Xsp]     // is a specialized implementation of constructor TN
    def foo$J(val T$TypeTag: Byte): miniboxing.tests.compile.tparams.TN[Tsp,String] // is a forwarder to the specialized member
    def foo(): miniboxing.tests.compile.tparams.TN[Tsp,String]             // is a specialized implementation of method foo
    private[this] val t: Tsp                                               // is a specialized implementation of value t
    val t$J(val T$TypeTag: Byte): Tsp @storage[Long]                       // is a forwarder to the specialized member
    val t(): Tsp                                                           // is a setter or getter for value t
  }
[Now checking: minibox-inject]
[Now checking: minibox-bridge]
[Not checkable: minibox-coerce]
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile.tparams {
  abstract trait TN[@miniboxed T, X] extends Object {
    <stable> <accessor> <paramaccessor> def t(): T;
    <stable> <accessor> def t$J(T$TypeTag: Byte): Long;
    def foo(): miniboxing.tests.compile.tparams.TN[T,String];
    def foo$J(T$TypeTag: Byte): miniboxing.tests.compile.tparams.TN[T,String]
  };
  class TN$J[Tsp, Xsp] extends Object with miniboxing.tests.compile.tparams.TN[Tsp,Xsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|tparams|TN$J|T$TypeTag: Byte = _;
    <paramaccessor> private[this] val t: Long = _;
    <stable> <accessor> <paramaccessor> def t(): Tsp = MiniboxConversions.this.minibox2box[Tsp](TN$J.this.t$J(TN$J.this.miniboxing|tests|compile|tparams|TN$J|T$TypeTag), TN$J.this.miniboxing|tests|compile|tparams|TN$J|T$TypeTag);
    <stable> <accessor> def t$J(T$TypeTag: Byte): Long = TN$J.this.t;
    def <init>(miniboxing|tests|compile|tparams|TN$J|T$TypeTag: Byte, t: Long): miniboxing.tests.compile.tparams.TN$J[Tsp,Xsp] = {
      TN$J.super.<init>();
      ()
    };
    def foo(): miniboxing.tests.compile.tparams.TN[Tsp,String] = TN$J.this.foo$J(TN$J.this.miniboxing|tests|compile|tparams|TN$J|T$TypeTag);
    def foo$J(T$TypeTag: Byte): miniboxing.tests.compile.tparams.TN[Tsp,String] = new miniboxing.tests.compile.tparams.TN$J[Tsp,String](T$TypeTag, TN$J.this.t$J(T$TypeTag))
  };
  class TN$L[Tsp, Xsp] extends Object with miniboxing.tests.compile.tparams.TN[Tsp,Xsp] {
    <paramaccessor> private[this] val t: Tsp = _;
    <stable> <accessor> <paramaccessor> def t(): Tsp = TN$L.this.t;
    <stable> <accessor> def t$J(T$TypeTag: Byte): Long = MiniboxConversions.this.box2minibox_tt[Tsp](TN$L.this.t(), T$TypeTag);
    def <init>(t: Tsp): miniboxing.tests.compile.tparams.TN$L[Tsp,Xsp] = {
      TN$L.super.<init>();
      ()
    };
    def foo(): miniboxing.tests.compile.tparams.TN[Tsp,String] = new miniboxing.tests.compile.tparams.TN$L[Tsp,String](TN$L.this.t());
    def foo$J(T$TypeTag: Byte): miniboxing.tests.compile.tparams.TN[Tsp,String] = TN$L.this.foo()
  };
  object TestNewRewire extends Object {
    def <init>(): miniboxing.tests.compile.tparams.TestNewRewire.type = {
      TestNewRewire.super.<init>();
      ()
    };
    def test[T](t: T): String = {
      new miniboxing.tests.compile.tparams.TN$J[Int,String](5, MiniboxConversions.this.int2minibox(1));
      new miniboxing.tests.compile.tparams.TN$L[String,String]("xxx");
      new miniboxing.tests.compile.tparams.TN$L[T,String](t);
      new String("yyy")
    }
  }
}
[Now checking: minibox-commit]