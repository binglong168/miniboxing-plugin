Miniboxing plugin warning: Optimizing `MbArray`s, tuples and functions can only be done if you allow the plugin to use both long and double encodings (remove the `P:minibox:Yone-way` compiler option). In this run, the above classes will be generic and will box.
Specializing class C...
  // interface:
  abstract trait C[T] extends Object {
  }
  // specialized class:
  class C$J[Tsp] extends C[Tsp] {
    def <init>(val miniboxing|tests|compile|inheritance|C$J|T$TypeTag: Byte): miniboxing.tests.compile.inheritance.C$J[Tsp] // is a specialized implementation of constructor C
    private[this] val miniboxing|tests|compile|inheritance|C$J|T$TypeTag: Byte // is a type tag
  }
  // specialized class:
  class C$L[Tsp] extends C[Tsp] {
    def <init>(): miniboxing.tests.compile.inheritance.C$L[Tsp]            // is a specialized implementation of constructor C
  }
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile.inheritance {
  abstract trait C[@miniboxed T] extends Object;
  class C$J[Tsp] extends Object with miniboxing.tests.compile.inheritance.C[Tsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|inheritance|C$J|T$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|inheritance|C$J|T$TypeTag: Byte): miniboxing.tests.compile.inheritance.C$J[Tsp] = {
      C$J.super.<init>();
      ()
    }
  };
  class C$L[Tsp] extends Object with miniboxing.tests.compile.inheritance.C[Tsp] {
    def <init>(): miniboxing.tests.compile.inheritance.C$L[Tsp] = {
      C$L.super.<init>();
      ()
    }
  };
  class D extends miniboxing.tests.compile.inheritance.C$J[Int] {
    def <init>(): miniboxing.tests.compile.inheritance.D = {
      D.super.<init>(5);
      ()
    }
  }
}