Miniboxing plugin warning: Optimizing `MbArray`s, tuples and functions can only be done if you allow the plugin to use both long and double encodings (remove the `P:minibox:Yone-way` compiler option). In this run, the above classes will be generic and will box.
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile.bug69 {
  object Test extends Object {
    def <init>(): miniboxing.tests.compile.bug69.Test.type = {
      Test.super.<init>();
      ()
    };
    def foo(): Nothing = {
      abstract trait C[@miniboxed T] extends Object;
      class C$J[Tsp] extends Object with C[Tsp] {
        <paramaccessor> private[this] val miniboxing|tests|compile|bug69|Test|C$J|T$TypeTag: Byte = _;
        def <init>(miniboxing|tests|compile|bug69|Test|C$J|T$TypeTag: Byte): C$J[Tsp] = {
          C$J.super.<init>();
          ()
        }
      };
      class C$L[Tsp] extends Object with C[Tsp] {
        def <init>(): C$L[Tsp] = {
          C$L.super.<init>();
          ()
        }
      };
      scala.this.Predef.???()
    }
  }
}