Miniboxing plugin warning: Optimizing `MbArray`s, tuples and functions can only be done if you allow the plugin to use both long and double encodings (remove the `P:minibox:Yone-way` compiler option). In this run, the above classes will be generic and will box.
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.test.compile.bugs63 {
  abstract trait C[@miniboxed T] extends Object {
    <stable> <accessor> <paramaccessor> def t(): T;
    <stable> <accessor> def t$J(T$TypeTag: Byte): Long
  };
  class C$J[Tsp] extends Object with miniboxing.test.compile.bugs63.C[Tsp] {
    <paramaccessor> private[this] val miniboxing|test|compile|bugs63|C$J|T$TypeTag: Byte = _;
    <paramaccessor> private[this] val t: Long = _;
    <stable> <accessor> <paramaccessor> def t(): Tsp = MiniboxConversions.this.minibox2box[Tsp](C$J.this.t$J(C$J.this.miniboxing|test|compile|bugs63|C$J|T$TypeTag), C$J.this.miniboxing|test|compile|bugs63|C$J|T$TypeTag);
    <stable> <accessor> def t$J(T$TypeTag: Byte): Long = C$J.this.t;
    def <init>(miniboxing|test|compile|bugs63|C$J|T$TypeTag: Byte, t: Long): miniboxing.test.compile.bugs63.C$J[Tsp] = {
      C$J.super.<init>();
      ()
    }
  };
  class C$L[Tsp] extends Object with miniboxing.test.compile.bugs63.C[Tsp] {
    <paramaccessor> private[this] val t: Tsp = _;
    <stable> <accessor> <paramaccessor> def t(): Tsp = C$L.this.t;
    <stable> <accessor> def t$J(T$TypeTag: Byte): Long = MiniboxConversions.this.box2minibox_tt[Tsp](C$L.this.t(), T$TypeTag);
    def <init>(t: Tsp): miniboxing.test.compile.bugs63.C$L[Tsp] = {
      C$L.super.<init>();
      ()
    }
  };
  object Test extends Object {
    def <init>(): miniboxing.test.compile.bugs63.Test.type = {
      Test.super.<init>();
      ()
    };
    scala.this.Predef.println(MiniboxConversions.this.minibox2box[Unit](new miniboxing.test.compile.bugs63.C$J[Unit](0, MiniboxConversions.this.box2minibox_tt[Unit]((), 0)).t$J(0), 0));
    scala.this.Predef.println(MiniboxConversions.this.minibox2boolean(new miniboxing.test.compile.bugs63.C$J[Boolean](1, MiniboxConversions.this.boolean2minibox(false)).t$J(1)));
    scala.this.Predef.println(MiniboxConversions.this.minibox2byte(new miniboxing.test.compile.bugs63.C$J[Byte](2, MiniboxConversions.this.byte2minibox(3)).t$J(2)));
    scala.this.Predef.println(MiniboxConversions.this.minibox2char(new miniboxing.test.compile.bugs63.C$J[Char](4, MiniboxConversions.this.char2minibox('c')).t$J(4)));
    scala.this.Predef.println(MiniboxConversions.this.minibox2short(new miniboxing.test.compile.bugs63.C$J[Short](3, MiniboxConversions.this.short2minibox(3)).t$J(3)));
    scala.this.Predef.println(MiniboxConversions.this.minibox2int(new miniboxing.test.compile.bugs63.C$J[Int](5, MiniboxConversions.this.int2minibox(3)).t$J(5)));
    scala.this.Predef.println(MiniboxConversions.this.minibox2long(new miniboxing.test.compile.bugs63.C$J[Long](6, MiniboxConversions.this.long2minibox(3L)).t$J(6)));
    scala.this.Predef.println(MiniboxConversions.this.minibox2float(new miniboxing.test.compile.bugs63.C$J[Float](7, MiniboxConversions.this.float2minibox(3.0)).t$J(7)));
    scala.this.Predef.println(MiniboxConversions.this.minibox2double(new miniboxing.test.compile.bugs63.C$J[Double](8, MiniboxConversions.this.double2minibox(3.0)).t$J(8)));
    scala.this.Predef.println(new miniboxing.test.compile.bugs63.C$L[Nothing](scala.this.Predef.???()).t())
  }
}