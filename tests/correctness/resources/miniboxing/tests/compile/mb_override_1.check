Miniboxing plugin warning: Optimizing `MbArray`s, tuples and functions can only be done if you allow the plugin to use both long and double encodings (remove the `P:minibox:Yone-way` compiler option). In this run, the above classes will be generic and will box.
Specializing class Base1...
  // interface:
  abstract trait Base1[T, S] extends Object {
    def overrideMe$JJ(val T$TypeTag: Byte,val S$TypeTag: Byte,t: T @storage[Long],s: S @storage[Long]): T @storage[Long]
    def overrideMe$JL(val T$TypeTag: Byte,t: T @storage[Long],s: S): T @storage[Long]
    def overrideMe$LJ(val S$TypeTag: Byte,t: T,s: S @storage[Long]): T
    def overrideMe(t: T,s: S): T
  }
  // specialized class:
  class Base1$JJ[Tsp, Ssp] extends Base1[Tsp,Ssp] {
    def <init>(val miniboxing|tests|compile|Base1$JJ|T$TypeTag: Byte,val miniboxing|tests|compile|Base1$JJ|S$TypeTag: Byte): miniboxing.tests.compile.Base1$JJ[Tsp,Ssp] // is a specialized implementation of constructor Base1
    def overrideMe$JJ(val T$TypeTag: Byte,val S$TypeTag: Byte,t: Tsp @storage[Long],s: Ssp @storage[Long]): Tsp @storage[Long] // is a specialized implementation of method overrideMe
    def overrideMe$JL(val T$TypeTag: Byte,t: Tsp @storage[Long],s: Ssp): Tsp @storage[Long] // is a forwarder to the specialized member
    def overrideMe$LJ(val S$TypeTag: Byte,t: Tsp,s: Ssp @storage[Long]): Tsp // is a forwarder to the specialized member
    def overrideMe(t: Tsp,s: Ssp): Tsp                                     // is a forwarder to the specialized member
    private[this] val miniboxing|tests|compile|Base1$JJ|S$TypeTag: Byte    // is a type tag
    private[this] val miniboxing|tests|compile|Base1$JJ|T$TypeTag: Byte    // is a type tag
  }
  // specialized class:
  class Base1$LJ[Tsp, Ssp] extends Base1[Tsp,Ssp] {
    def <init>(val miniboxing|tests|compile|Base1$LJ|S$TypeTag: Byte): miniboxing.tests.compile.Base1$LJ[Tsp,Ssp] // is a specialized implementation of constructor Base1
    def overrideMe$JJ(val T$TypeTag: Byte,val S$TypeTag: Byte,t: Tsp @storage[Long],s: Ssp @storage[Long]): Tsp @storage[Long] // is a forwarder to the specialized member
    def overrideMe$JL(val T$TypeTag: Byte,t: Tsp @storage[Long],s: Ssp): Tsp @storage[Long] // is a forwarder to the specialized member
    def overrideMe$LJ(val S$TypeTag: Byte,t: Tsp,s: Ssp @storage[Long]): Tsp // is a specialized implementation of method overrideMe
    def overrideMe(t: Tsp,s: Ssp): Tsp                                     // is a forwarder to the specialized member
    private[this] val miniboxing|tests|compile|Base1$LJ|S$TypeTag: Byte    // is a type tag
  }
  // specialized class:
  class Base1$JL[Tsp, Ssp] extends Base1[Tsp,Ssp] {
    def <init>(val miniboxing|tests|compile|Base1$JL|T$TypeTag: Byte): miniboxing.tests.compile.Base1$JL[Tsp,Ssp] // is a specialized implementation of constructor Base1
    def overrideMe$JJ(val T$TypeTag: Byte,val S$TypeTag: Byte,t: Tsp @storage[Long],s: Ssp @storage[Long]): Tsp @storage[Long] // is a forwarder to the specialized member
    def overrideMe$JL(val T$TypeTag: Byte,t: Tsp @storage[Long],s: Ssp): Tsp @storage[Long] // is a specialized implementation of method overrideMe
    def overrideMe$LJ(val S$TypeTag: Byte,t: Tsp,s: Ssp @storage[Long]): Tsp // is a forwarder to the specialized member
    def overrideMe(t: Tsp,s: Ssp): Tsp                                     // is a forwarder to the specialized member
    private[this] val miniboxing|tests|compile|Base1$JL|T$TypeTag: Byte    // is a type tag
  }
  // specialized class:
  class Base1$LL[Tsp, Ssp] extends Base1[Tsp,Ssp] {
    def <init>(): miniboxing.tests.compile.Base1$LL[Tsp,Ssp]               // is a specialized implementation of constructor Base1
    def overrideMe$JJ(val T$TypeTag: Byte,val S$TypeTag: Byte,t: Tsp @storage[Long],s: Ssp @storage[Long]): Tsp @storage[Long] // is a forwarder to the specialized member
    def overrideMe$JL(val T$TypeTag: Byte,t: Tsp @storage[Long],s: Ssp): Tsp @storage[Long] // is a forwarder to the specialized member
    def overrideMe$LJ(val S$TypeTag: Byte,t: Tsp,s: Ssp @storage[Long]): Tsp // is a forwarder to the specialized member
    def overrideMe(t: Tsp,s: Ssp): Tsp                                     // is a specialized implementation of method overrideMe
  }
[Now checking: minibox-inject]
[Now checking: minibox-bridge]
[Not checkable: minibox-coerce]
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile {
  abstract trait Base1[@miniboxed T, @miniboxed S] extends Object {
    def overrideMe(t: T, s: S): T;
    def overrideMe$JJ(T$TypeTag: Byte, S$TypeTag: Byte, t: Long, s: Long): Long;
    def overrideMe$JL(T$TypeTag: Byte, t: Long, s: S): Long;
    def overrideMe$LJ(S$TypeTag: Byte, t: T, s: Long): T
  };
  class Base1$JJ[Tsp, Ssp] extends Object with miniboxing.tests.compile.Base1[Tsp,Ssp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|Base1$JJ|S$TypeTag: Byte = _;
    <paramaccessor> private[this] val miniboxing|tests|compile|Base1$JJ|T$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|Base1$JJ|T$TypeTag: Byte, miniboxing|tests|compile|Base1$JJ|S$TypeTag: Byte): miniboxing.tests.compile.Base1$JJ[Tsp,Ssp] = {
      Base1$JJ.super.<init>();
      ()
    };
    def overrideMe(t: Tsp, s: Ssp): Tsp = MiniboxConversions.this.minibox2box[Tsp](Base1$JJ.this.overrideMe$JJ(Base1$JJ.this.miniboxing|tests|compile|Base1$JJ|T$TypeTag, Base1$JJ.this.miniboxing|tests|compile|Base1$JJ|S$TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](t, Base1$JJ.this.miniboxing|tests|compile|Base1$JJ|T$TypeTag), MiniboxConversions.this.box2minibox_tt[Ssp](s, Base1$JJ.this.miniboxing|tests|compile|Base1$JJ|S$TypeTag)), Base1$JJ.this.miniboxing|tests|compile|Base1$JJ|T$TypeTag);
    def overrideMe$JJ(T$TypeTag: Byte, S$TypeTag: Byte, t: Long, s: Long): Long = t;
    def overrideMe$JL(T$TypeTag: Byte, t: Long, s: Ssp): Long = Base1$JJ.this.overrideMe$JJ(T$TypeTag, Base1$JJ.this.miniboxing|tests|compile|Base1$JJ|S$TypeTag, t, MiniboxConversions.this.box2minibox_tt[Ssp](s, Base1$JJ.this.miniboxing|tests|compile|Base1$JJ|S$TypeTag));
    def overrideMe$LJ(S$TypeTag: Byte, t: Tsp, s: Long): Tsp = MiniboxConversions.this.minibox2box[Tsp](Base1$JJ.this.overrideMe$JJ(Base1$JJ.this.miniboxing|tests|compile|Base1$JJ|T$TypeTag, S$TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](t, Base1$JJ.this.miniboxing|tests|compile|Base1$JJ|T$TypeTag), s), Base1$JJ.this.miniboxing|tests|compile|Base1$JJ|T$TypeTag)
  };
  class Base1$JL[Tsp, Ssp] extends Object with miniboxing.tests.compile.Base1[Tsp,Ssp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|Base1$JL|T$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|Base1$JL|T$TypeTag: Byte): miniboxing.tests.compile.Base1$JL[Tsp,Ssp] = {
      Base1$JL.super.<init>();
      ()
    };
    def overrideMe(t: Tsp, s: Ssp): Tsp = MiniboxConversions.this.minibox2box[Tsp](Base1$JL.this.overrideMe$JL(Base1$JL.this.miniboxing|tests|compile|Base1$JL|T$TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](t, Base1$JL.this.miniboxing|tests|compile|Base1$JL|T$TypeTag), s), Base1$JL.this.miniboxing|tests|compile|Base1$JL|T$TypeTag);
    def overrideMe$JJ(T$TypeTag: Byte, S$TypeTag: Byte, t: Long, s: Long): Long = Base1$JL.this.overrideMe$JL(T$TypeTag, t, MiniboxConversions.this.minibox2box[Ssp](s, S$TypeTag));
    def overrideMe$JL(T$TypeTag: Byte, t: Long, s: Ssp): Long = t;
    def overrideMe$LJ(S$TypeTag: Byte, t: Tsp, s: Long): Tsp = MiniboxConversions.this.minibox2box[Tsp](Base1$JL.this.overrideMe$JL(Base1$JL.this.miniboxing|tests|compile|Base1$JL|T$TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](t, Base1$JL.this.miniboxing|tests|compile|Base1$JL|T$TypeTag), MiniboxConversions.this.minibox2box[Ssp](s, S$TypeTag)), Base1$JL.this.miniboxing|tests|compile|Base1$JL|T$TypeTag)
  };
  class Base1$LJ[Tsp, Ssp] extends Object with miniboxing.tests.compile.Base1[Tsp,Ssp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|Base1$LJ|S$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|Base1$LJ|S$TypeTag: Byte): miniboxing.tests.compile.Base1$LJ[Tsp,Ssp] = {
      Base1$LJ.super.<init>();
      ()
    };
    def overrideMe(t: Tsp, s: Ssp): Tsp = Base1$LJ.this.overrideMe$LJ(Base1$LJ.this.miniboxing|tests|compile|Base1$LJ|S$TypeTag, t, MiniboxConversions.this.box2minibox_tt[Ssp](s, Base1$LJ.this.miniboxing|tests|compile|Base1$LJ|S$TypeTag));
    def overrideMe$JJ(T$TypeTag: Byte, S$TypeTag: Byte, t: Long, s: Long): Long = MiniboxConversions.this.box2minibox_tt[Tsp](Base1$LJ.this.overrideMe$LJ(S$TypeTag, MiniboxConversions.this.minibox2box[Tsp](t, T$TypeTag), s), T$TypeTag);
    def overrideMe$JL(T$TypeTag: Byte, t: Long, s: Ssp): Long = MiniboxConversions.this.box2minibox_tt[Tsp](Base1$LJ.this.overrideMe$LJ(Base1$LJ.this.miniboxing|tests|compile|Base1$LJ|S$TypeTag, MiniboxConversions.this.minibox2box[Tsp](t, T$TypeTag), MiniboxConversions.this.box2minibox_tt[Ssp](s, Base1$LJ.this.miniboxing|tests|compile|Base1$LJ|S$TypeTag)), T$TypeTag);
    def overrideMe$LJ(S$TypeTag: Byte, t: Tsp, s: Long): Tsp = t
  };
  class Base1$LL[Tsp, Ssp] extends Object with miniboxing.tests.compile.Base1[Tsp,Ssp] {
    def <init>(): miniboxing.tests.compile.Base1$LL[Tsp,Ssp] = {
      Base1$LL.super.<init>();
      ()
    };
    def overrideMe(t: Tsp, s: Ssp): Tsp = t;
    def overrideMe$JJ(T$TypeTag: Byte, S$TypeTag: Byte, t: Long, s: Long): Long = MiniboxConversions.this.box2minibox_tt[Tsp](Base1$LL.this.overrideMe(MiniboxConversions.this.minibox2box[Tsp](t, T$TypeTag), MiniboxConversions.this.minibox2box[Ssp](s, S$TypeTag)), T$TypeTag);
    def overrideMe$JL(T$TypeTag: Byte, t: Long, s: Ssp): Long = MiniboxConversions.this.box2minibox_tt[Tsp](Base1$LL.this.overrideMe(MiniboxConversions.this.minibox2box[Tsp](t, T$TypeTag), s), T$TypeTag);
    def overrideMe$LJ(S$TypeTag: Byte, t: Tsp, s: Long): Tsp = Base1$LL.this.overrideMe(t, MiniboxConversions.this.minibox2box[Ssp](s, S$TypeTag))
  };
  class Override11[T, S] extends miniboxing.tests.compile.Base1$LL[T,S] {
    def <init>(): miniboxing.tests.compile.Override11[T,S] = {
      Override11.super.<init>();
      ()
    };
    override def overrideMe(t: T, s: S): T = scala.this.Predef.???()
  };
  class Override12[T] extends miniboxing.tests.compile.Base1$LJ[T,Int] {
    def <init>(): miniboxing.tests.compile.Override12[T] = {
      Override12.super.<init>(5);
      ()
    };
    override def overrideMe(t: T, s: Int): T = Override12.this.overrideMe$LJ(5, t, MiniboxConversions.this.int2minibox(s));
    override def overrideMe$LJ(S$TypeTag: Byte, t: T, s: Long): T = scala.this.Predef.???()
  };
  class Override13 extends miniboxing.tests.compile.Base1$JJ[Int,Int] {
    def <init>(): miniboxing.tests.compile.Override13 = {
      Override13.super.<init>(5, 5);
      ()
    };
    override def overrideMe(t: Int, s: Int): Int = MiniboxConversions.this.minibox2int(Override13.this.overrideMe$JJ(5, 5, MiniboxConversions.this.int2minibox(t), MiniboxConversions.this.int2minibox(s)));
    override def overrideMe$JJ(T$TypeTag: Byte, S$TypeTag: Byte, t: Long, s: Long): Long = MiniboxConversions.this.int2minibox(scala.this.Predef.???())
  }
}
[Now checking: minibox-commit]