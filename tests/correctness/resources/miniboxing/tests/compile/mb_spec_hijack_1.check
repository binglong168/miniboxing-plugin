Miniboxing plugin warning: Optimizing `MbArray`s, tuples and functions can only be done if you allow the plugin to use both long and double encodings (remove the `P:minibox:Yone-way` compiler option). In this run, the above classes will be generic and will box.
Specializing class HijackMe...
  // interface:
  abstract trait HijackMe[T] extends Object {
  }
  // specialized class:
  class HijackMe$J[Tsp] extends HijackMe[Tsp] {
    def <init>(val miniboxing|tests|compile|HijackMe$J|T$TypeTag: Byte): miniboxing.tests.compile.HijackMe$J[Tsp] // is a specialized implementation of constructor HijackMe
    private[this] val miniboxing|tests|compile|HijackMe$J|T$TypeTag: Byte  // is a type tag
  }
  // specialized class:
  class HijackMe$L[Tsp] extends HijackMe[Tsp] {
    def <init>(): miniboxing.tests.compile.HijackMe$L[Tsp]                 // is a specialized implementation of constructor HijackMe
  }
[Now checking: minibox-inject]
[Now checking: minibox-bridge]
[Not checkable: minibox-coerce]
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile {
  abstract trait HijackMe[@miniboxed T] extends Object;
  class HijackMe$J[Tsp] extends Object with miniboxing.tests.compile.HijackMe[Tsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|HijackMe$J|T$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|HijackMe$J|T$TypeTag: Byte): miniboxing.tests.compile.HijackMe$J[Tsp] = {
      HijackMe$J.super.<init>();
      ()
    }
  };
  class HijackMe$L[Tsp] extends Object with miniboxing.tests.compile.HijackMe[Tsp] {
    def <init>(): miniboxing.tests.compile.HijackMe$L[Tsp] = {
      HijackMe$L.super.<init>();
      ()
    }
  }
}
[Now checking: minibox-commit]