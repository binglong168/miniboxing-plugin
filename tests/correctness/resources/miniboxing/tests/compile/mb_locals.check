Miniboxing plugin warning: Optimizing `MbArray`s, tuples and functions can only be done if you allow the plugin to use both long and double encodings (remove the `P:minibox:Yone-way` compiler option). In this run, the above classes will be generic and will box.
[Now checking: minibox-inject]
[Now checking: minibox-bridge]
[Not checkable: minibox-coerce]
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile {
  abstract trait LocalValuesHandling[@miniboxed T] extends Object {
    def extend(): Int;
    def extend$J(T$TypeTag: Byte): Int
  };
  class LocalValuesHandling$J[Tsp] extends Object with miniboxing.tests.compile.LocalValuesHandling[Tsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|LocalValuesHandling$J|T$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|LocalValuesHandling$J|T$TypeTag: Byte): miniboxing.tests.compile.LocalValuesHandling$J[Tsp] = {
      LocalValuesHandling$J.super.<init>();
      ()
    };
    private[this] val x: Int = 0;
    def extend(): Int = LocalValuesHandling$J.this.extend$J(LocalValuesHandling$J.this.miniboxing|tests|compile|LocalValuesHandling$J|T$TypeTag);
    def extend$J(T$TypeTag: Byte): Int = LocalValuesHandling$J.this.x.+(1)
  };
  class LocalValuesHandling$L[Tsp] extends Object with miniboxing.tests.compile.LocalValuesHandling[Tsp] {
    def <init>(): miniboxing.tests.compile.LocalValuesHandling$L[Tsp] = {
      LocalValuesHandling$L.super.<init>();
      ()
    };
    private[this] val x: Int = 0;
    def extend(): Int = LocalValuesHandling$L.this.x.+(1);
    def extend$J(T$TypeTag: Byte): Int = LocalValuesHandling$L.this.extend()
  }
}
[Now checking: minibox-commit]