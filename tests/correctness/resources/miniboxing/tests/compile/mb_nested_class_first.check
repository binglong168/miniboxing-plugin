Miniboxing plugin warning: Optimizing `MbArray`s, tuples and functions can only be done if you allow the plugin to use both long and double encodings (remove the `P:minibox:Yone-way` compiler option). In this run, the above classes will be generic and will box.
Specializing class C...
  // interface:
  abstract trait C[T] extends Object {
    class D[U] extends Object
  }
  // specialized class:
  class C$J[Tsp] extends C[Tsp] {
    def <init>(val miniboxing|tests|compile|nested|C$J|T$TypeTag: Byte,c: Tsp @storage[Long]): miniboxing.tests.compile.nested.C$J[Tsp] // is a specialized implementation of constructor C
    private[this] val c: Tsp @storage[Long]                                // is a specialized implementation of value c
    private[this] val miniboxing|tests|compile|nested|C$J|T$TypeTag: Byte  // is a type tag
  }
  // specialized class:
  class C$L[Tsp] extends C[Tsp] {
    def <init>(c: Tsp): miniboxing.tests.compile.nested.C$L[Tsp]           // is a specialized implementation of constructor C
    private[this] val c: Tsp                                               // is a specialized implementation of value c
  }
Specializing class D...
  // interface:
  abstract trait D[U] extends Object {
  }
  // specialized class:
  class D$J[Usp] extends C.this.D[Usp] {
    def <init>(val miniboxing|tests|compile|nested|C|D$J|U$TypeTag: Byte,d: Usp @storage[Long]): C.this.D$J[Usp] // is a specialized implementation of constructor D
    private[this] val d: Usp @storage[Long]                                // is a specialized implementation of value d
    private[this] val miniboxing|tests|compile|nested|C|D$J|U$TypeTag: Byte // is a type tag
  }
  // specialized class:
  class D$L[Usp] extends C.this.D[Usp] {
    def <init>(d: Usp): C.this.D$L[Usp]                                    // is a specialized implementation of constructor D
    private[this] val d: Usp                                               // is a specialized implementation of value d
  }
[Now checking: minibox-inject]
[Now checking: minibox-bridge]
[Not checkable: minibox-coerce]
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile.nested {
  abstract trait C[@miniboxed T] extends Object {
    abstract trait D[@miniboxed U] extends Object;
    class D$J[Usp] extends Object with C.this.D[Usp] {
      <paramaccessor> private[this] val miniboxing|tests|compile|nested|C|D$J|U$TypeTag: Byte = _;
      <paramaccessor> private[this] val d: Long = _;
      def <init>(miniboxing|tests|compile|nested|C|D$J|U$TypeTag: Byte, d: Long): C.this.D$J[Usp] = {
        D$J.super.<init>();
        ()
      }
    };
    class D$L[Usp] extends Object with C.this.D[Usp] {
      <paramaccessor> private[this] val d: Usp = _;
      def <init>(d: Usp): C.this.D$L[Usp] = {
        D$L.super.<init>();
        ()
      }
    }
  };
  class C$J[Tsp] extends Object with miniboxing.tests.compile.nested.C[Tsp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|nested|C$J|T$TypeTag: Byte = _;
    <paramaccessor> private[this] val c: Long = _;
    def <init>(miniboxing|tests|compile|nested|C$J|T$TypeTag: Byte, c: Long): miniboxing.tests.compile.nested.C$J[Tsp] = {
      C$J.super.<init>();
      ()
    }
  };
  class C$L[Tsp] extends Object with miniboxing.tests.compile.nested.C[Tsp] {
    <paramaccessor> private[this] val c: Tsp = _;
    def <init>(c: Tsp): miniboxing.tests.compile.nested.C$L[Tsp] = {
      C$L.super.<init>();
      ()
    }
  }
}
[Now checking: minibox-commit]