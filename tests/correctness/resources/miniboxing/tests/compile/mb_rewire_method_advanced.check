Miniboxing plugin warning: Optimizing `MbArray`s, tuples and functions can only be done if you allow the plugin to use both long and double encodings (remove the `P:minibox:Yone-way` compiler option). In this run, the above classes will be generic and will box.
Specializing class UhOh...
  // interface:
  abstract trait UhOh[X, Y] extends Object {
    def foo$J(val X$TypeTag: Byte,x: X @storage[Long],y: Y): X @storage[Long]
    def foo(x: X,y: Y): X
  }
  // specialized class:
  class UhOh$J[Xsp, Ysp] extends UhOh[Xsp,Ysp] {
    def <init>(val miniboxing|tests|compile|UhOh$J|X$TypeTag: Byte): miniboxing.tests.compile.UhOh$J[Xsp,Ysp] // is a specialized implementation of constructor UhOh
    def foo$J(val X$TypeTag: Byte,x: Xsp @storage[Long],y: Ysp): Xsp @storage[Long] // is a specialized implementation of method foo
    def foo(x: Xsp,y: Ysp): Xsp                                            // is a forwarder to the specialized member
    private[this] val miniboxing|tests|compile|UhOh$J|X$TypeTag: Byte      // is a type tag
  }
  // specialized class:
  class UhOh$L[Xsp, Ysp] extends UhOh[Xsp,Ysp] {
    def <init>(): miniboxing.tests.compile.UhOh$L[Xsp,Ysp]                 // is a specialized implementation of constructor UhOh
    def foo$J(val X$TypeTag: Byte,x: Xsp @storage[Long],y: Ysp): Xsp @storage[Long] // is a forwarder to the specialized member
    def foo(x: Xsp,y: Ysp): Xsp                                            // is a specialized implementation of method foo
  }
Specializing class OhUh...
  // interface:
  abstract trait OhUh[U] extends Object {
    def test$J(val U$TypeTag: Byte): U @storage[Long]
    def test(): U
    def u$J(val U$TypeTag: Byte): U @storage[Long]
    def u$J_=(val U$TypeTag: Byte,x$1: U @storage[Long]): Unit
    def u(): U
    def u_=(x$1: U): Unit
  }
  // specialized class:
  class OhUh$J[Usp] extends OhUh[Usp] {
    def <init>(val miniboxing|tests|compile|OhUh$J|U$TypeTag: Byte,u: Usp @storage[Long]): miniboxing.tests.compile.OhUh$J[Usp] // is a specialized implementation of constructor OhUh
    def test$J(val U$TypeTag: Byte): Usp @storage[Long]                    // is a specialized implementation of method test
    def test(): Usp                                                        // is a forwarder to the specialized member
    def u$J(val U$TypeTag: Byte): Usp @storage[Long]                       // is a setter or getter for variable u
    def u$J_=(val U$TypeTag: Byte,x$1: Usp @storage[Long]): Unit           // is a setter or getter for variable u
    def u(): Usp                                                           // is a forwarder to the specialized member
    def u_=(x$1: Usp): Unit                                                // is a forwarder to the specialized member
    private[this] val miniboxing|tests|compile|OhUh$J|U$TypeTag: Byte      // is a type tag
    private[this] var u: Usp @storage[Long]                                // is a specialized implementation of variable u
  }
  // specialized class:
  class OhUh$L[Usp] extends OhUh[Usp] {
    def <init>(u: Usp): miniboxing.tests.compile.OhUh$L[Usp]               // is a specialized implementation of constructor OhUh
    def test$J(val U$TypeTag: Byte): Usp @storage[Long]                    // is a forwarder to the specialized member
    def test(): Usp                                                        // is a specialized implementation of method test
    def u$J(val U$TypeTag: Byte): Usp @storage[Long]                       // is a forwarder to the specialized member
    def u$J_=(val U$TypeTag: Byte,x$1: Usp @storage[Long]): Unit           // is a forwarder to the specialized member
    def u(): Usp                                                           // is a setter or getter for variable u
    def u_=(x$1: Usp): Unit                                                // is a setter or getter for variable u
    private[this] var u: Usp                                               // is a specialized implementation of variable u
  }
[Now checking: minibox-inject]
[Now checking: minibox-bridge]
[Not checkable: minibox-coerce]
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile {
  abstract trait UhOh[@miniboxed X, Y] extends Object {
    def foo(x: X, y: Y): X;
    def foo$J(X$TypeTag: Byte, x: Long, y: Y): Long
  };
  class UhOh$J[Xsp, Ysp] extends Object with miniboxing.tests.compile.UhOh[Xsp,Ysp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|UhOh$J|X$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|UhOh$J|X$TypeTag: Byte): miniboxing.tests.compile.UhOh$J[Xsp,Ysp] = {
      UhOh$J.super.<init>();
      ()
    };
    def foo(x: Xsp, y: Ysp): Xsp = MiniboxConversions.this.minibox2box[Xsp](UhOh$J.this.foo$J(UhOh$J.this.miniboxing|tests|compile|UhOh$J|X$TypeTag, MiniboxConversions.this.box2minibox_tt[Xsp](x, UhOh$J.this.miniboxing|tests|compile|UhOh$J|X$TypeTag), y), UhOh$J.this.miniboxing|tests|compile|UhOh$J|X$TypeTag);
    def foo$J(X$TypeTag: Byte, x: Long, y: Ysp): Long = UhOh$J.this.foo$J(X$TypeTag, x, y)
  };
  class UhOh$L[Xsp, Ysp] extends Object with miniboxing.tests.compile.UhOh[Xsp,Ysp] {
    def <init>(): miniboxing.tests.compile.UhOh$L[Xsp,Ysp] = {
      UhOh$L.super.<init>();
      ()
    };
    def foo(x: Xsp, y: Ysp): Xsp = UhOh$L.this.foo(x, y);
    def foo$J(X$TypeTag: Byte, x: Long, y: Ysp): Long = MiniboxConversions.this.box2minibox_tt[Xsp](UhOh$L.this.foo(MiniboxConversions.this.minibox2box[Xsp](x, X$TypeTag), y), X$TypeTag)
  };
  abstract trait OhUh[@miniboxed U] extends Object {
    <accessor> <paramaccessor> def u(): U;
    <accessor> def u$J(U$TypeTag: Byte): Long;
    <accessor> <paramaccessor> def u_=(x$1: U): Unit;
    <accessor> def u$J_=(U$TypeTag: Byte, x$1: Long): Unit;
    def test(): U;
    def test$J(U$TypeTag: Byte): Long
  };
  class OhUh$J[Usp] extends Object with miniboxing.tests.compile.OhUh[Usp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|OhUh$J|U$TypeTag: Byte = _;
    <paramaccessor> private[this] var u: Long = _;
    <accessor> <paramaccessor> def u(): Usp = MiniboxConversions.this.minibox2box[Usp](OhUh$J.this.u$J(OhUh$J.this.miniboxing|tests|compile|OhUh$J|U$TypeTag), OhUh$J.this.miniboxing|tests|compile|OhUh$J|U$TypeTag);
    <accessor> def u$J(U$TypeTag: Byte): Long = OhUh$J.this.u;
    <accessor> <paramaccessor> def u_=(x$1: Usp): Unit = OhUh$J.this.u$J_=(OhUh$J.this.miniboxing|tests|compile|OhUh$J|U$TypeTag, MiniboxConversions.this.box2minibox_tt[Usp](x$1, OhUh$J.this.miniboxing|tests|compile|OhUh$J|U$TypeTag));
    <accessor> def u$J_=(U$TypeTag: Byte, x$1: Long): Unit = OhUh$J.this.u = x$1;
    def <init>(miniboxing|tests|compile|OhUh$J|U$TypeTag: Byte, u: Long): miniboxing.tests.compile.OhUh$J[Usp] = {
      OhUh$J.super.<init>();
      ()
    };
    def test(): Usp = MiniboxConversions.this.minibox2box[Usp](OhUh$J.this.test$J(OhUh$J.this.miniboxing|tests|compile|OhUh$J|U$TypeTag), OhUh$J.this.miniboxing|tests|compile|OhUh$J|U$TypeTag);
    def test$J(U$TypeTag: Byte): Long = {
      val tr: miniboxing.tests.compile.UhOh[Usp,Int] = new miniboxing.tests.compile.UhOh$J[Usp,Int](U$TypeTag);
      tr.foo$J(U$TypeTag, OhUh$J.this.u$J(U$TypeTag), 3)
    }
  };
  class OhUh$L[Usp] extends Object with miniboxing.tests.compile.OhUh[Usp] {
    <paramaccessor> private[this] var u: Usp = _;
    <accessor> <paramaccessor> def u(): Usp = OhUh$L.this.u;
    <accessor> def u$J(U$TypeTag: Byte): Long = MiniboxConversions.this.box2minibox_tt[Usp](OhUh$L.this.u(), U$TypeTag);
    <accessor> <paramaccessor> def u_=(x$1: Usp): Unit = OhUh$L.this.u = x$1;
    <accessor> def u$J_=(U$TypeTag: Byte, x$1: Long): Unit = OhUh$L.this.u_=(MiniboxConversions.this.minibox2box[Usp](x$1, U$TypeTag));
    def <init>(u: Usp): miniboxing.tests.compile.OhUh$L[Usp] = {
      OhUh$L.super.<init>();
      ()
    };
    def test(): Usp = {
      val tr: miniboxing.tests.compile.UhOh[Usp,Int] = new miniboxing.tests.compile.UhOh$L[Usp,Int]();
      tr.foo(OhUh$L.this.u(), 3)
    };
    def test$J(U$TypeTag: Byte): Long = MiniboxConversions.this.box2minibox_tt[Usp](OhUh$L.this.test(), U$TypeTag)
  }
}
[Now checking: minibox-commit]