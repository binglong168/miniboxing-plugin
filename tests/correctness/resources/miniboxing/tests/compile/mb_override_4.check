Miniboxing plugin warning: Optimizing `MbArray`s, tuples and functions can only be done if you allow the plugin to use both long and double encodings (remove the `P:minibox:Yone-way` compiler option). In this run, the above classes will be generic and will box.
Specializing class Base42...
  // interface:
  abstract trait Base42[T, S] extends Base41[T,S] {
    override def overrideMe$J(val T$TypeTag: Byte,t1: T @storage[Long],t2: T @storage[Long],t3: T @storage[Long],s: S): T @storage[Long]
    override def overrideMe(t1: T,t2: T,t3: T,s: S): T
  }
  // specialized class:
  class Base42$J[Tsp, Ssp] extends Base41[Tsp,Ssp] with Base42[Tsp,Ssp] {
    def <init>(val miniboxing|tests|compile|Base42$J|T$TypeTag: Byte): miniboxing.tests.compile.Base42$J[Tsp,Ssp] // is a specialized implementation of constructor Base42
    override def overrideMe$J(val T$TypeTag: Byte,t1: Tsp @storage[Long],t2: Tsp @storage[Long],t3: Tsp @storage[Long],s: Ssp): Tsp @storage[Long] // is a specialized implementation of method overrideMe
    override def overrideMe(t1: Tsp,t2: Tsp,t3: Tsp,s: Ssp): Tsp           // is a forwarder to the specialized member
    private[this] val miniboxing|tests|compile|Base42$J|T$TypeTag: Byte    // is a type tag
  }
  // specialized class:
  class Base42$L[Tsp, Ssp] extends Base41[Tsp,Ssp] with Base42[Tsp,Ssp] {
    def <init>(): miniboxing.tests.compile.Base42$L[Tsp,Ssp]               // is a specialized implementation of constructor Base42
    override def overrideMe$J(val T$TypeTag: Byte,t1: Tsp @storage[Long],t2: Tsp @storage[Long],t3: Tsp @storage[Long],s: Ssp): Tsp @storage[Long] // is a forwarder to the specialized member
    override def overrideMe(t1: Tsp,t2: Tsp,t3: Tsp,s: Ssp): Tsp           // is a specialized implementation of method overrideMe
  }
Specializing class Base43...
  // interface:
  abstract trait Base43[T, S] extends Base42[T,S] {
    override def overrideMe$JJ(val T$TypeTag: Byte,val S$TypeTag: Byte,t1: T @storage[Long],t2: T @storage[Long],t3: T @storage[Long],s: S @storage[Long]): T @storage[Long]
    override def overrideMe$JL(val T$TypeTag: Byte,t1: T @storage[Long],t2: T @storage[Long],t3: T @storage[Long],s: S): T @storage[Long]
    override def overrideMe$LJ(val S$TypeTag: Byte,t1: T,t2: T,t3: T,s: S @storage[Long]): T
    override def overrideMe(t1: T,t2: T,t3: T,s: S): T
  }
  // specialized class:
  class Base43$JJ[Tsp, Ssp] extends Base42$J[Tsp,Ssp] with Base43[Tsp,Ssp] {
    def <init>(val miniboxing|tests|compile|Base43$JJ|T$TypeTag: Byte,val miniboxing|tests|compile|Base43$JJ|S$TypeTag: Byte): miniboxing.tests.compile.Base43$JJ[Tsp,Ssp] // is a specialized implementation of constructor Base43
    override def overrideMe$JJ(val T$TypeTag: Byte,val S$TypeTag: Byte,t1: Tsp @storage[Long],t2: Tsp @storage[Long],t3: Tsp @storage[Long],s: Ssp @storage[Long]): Tsp @storage[Long] // is a specialized implementation of method overrideMe
    override def overrideMe$JL(val T$TypeTag: Byte,t1: Tsp @storage[Long],t2: Tsp @storage[Long],t3: Tsp @storage[Long],s: Ssp): Tsp @storage[Long] // is a forwarder to the specialized member
    override def overrideMe$LJ(val S$TypeTag: Byte,t1: Tsp,t2: Tsp,t3: Tsp,s: Ssp @storage[Long]): Tsp // is a forwarder to the specialized member
    override def overrideMe(t1: Tsp,t2: Tsp,t3: Tsp,s: Ssp): Tsp           // is a forwarder to the specialized member
    private[this] val miniboxing|tests|compile|Base43$JJ|S$TypeTag: Byte   // is a type tag
    private[this] val miniboxing|tests|compile|Base43$JJ|T$TypeTag: Byte   // is a type tag
  }
  // specialized class:
  class Base43$LJ[Tsp, Ssp] extends Base42$L[Tsp,Ssp] with Base43[Tsp,Ssp] {
    def <init>(val miniboxing|tests|compile|Base43$LJ|S$TypeTag: Byte): miniboxing.tests.compile.Base43$LJ[Tsp,Ssp] // is a specialized implementation of constructor Base43
    override def overrideMe$JJ(val T$TypeTag: Byte,val S$TypeTag: Byte,t1: Tsp @storage[Long],t2: Tsp @storage[Long],t3: Tsp @storage[Long],s: Ssp @storage[Long]): Tsp @storage[Long] // is a forwarder to the specialized member
    override def overrideMe$JL(val T$TypeTag: Byte,t1: Tsp @storage[Long],t2: Tsp @storage[Long],t3: Tsp @storage[Long],s: Ssp): Tsp @storage[Long] // is a forwarder to the specialized member
    override def overrideMe$LJ(val S$TypeTag: Byte,t1: Tsp,t2: Tsp,t3: Tsp,s: Ssp @storage[Long]): Tsp // is a specialized implementation of method overrideMe
    override def overrideMe(t1: Tsp,t2: Tsp,t3: Tsp,s: Ssp): Tsp           // is a forwarder to the specialized member
    private[this] val miniboxing|tests|compile|Base43$LJ|S$TypeTag: Byte   // is a type tag
  }
  // specialized class:
  class Base43$JL[Tsp, Ssp] extends Base42$J[Tsp,Ssp] with Base43[Tsp,Ssp] {
    def <init>(val miniboxing|tests|compile|Base43$JL|T$TypeTag: Byte): miniboxing.tests.compile.Base43$JL[Tsp,Ssp] // is a specialized implementation of constructor Base43
    override def overrideMe$JJ(val T$TypeTag: Byte,val S$TypeTag: Byte,t1: Tsp @storage[Long],t2: Tsp @storage[Long],t3: Tsp @storage[Long],s: Ssp @storage[Long]): Tsp @storage[Long] // is a forwarder to the specialized member
    override def overrideMe$JL(val T$TypeTag: Byte,t1: Tsp @storage[Long],t2: Tsp @storage[Long],t3: Tsp @storage[Long],s: Ssp): Tsp @storage[Long] // is a specialized implementation of method overrideMe
    override def overrideMe$LJ(val S$TypeTag: Byte,t1: Tsp,t2: Tsp,t3: Tsp,s: Ssp @storage[Long]): Tsp // is a forwarder to the specialized member
    override def overrideMe(t1: Tsp,t2: Tsp,t3: Tsp,s: Ssp): Tsp           // is a forwarder to the specialized member
    private[this] val miniboxing|tests|compile|Base43$JL|T$TypeTag: Byte   // is a type tag
  }
  // specialized class:
  class Base43$LL[Tsp, Ssp] extends Base42$L[Tsp,Ssp] with Base43[Tsp,Ssp] {
    def <init>(): miniboxing.tests.compile.Base43$LL[Tsp,Ssp]              // is a specialized implementation of constructor Base43
    override def overrideMe$JJ(val T$TypeTag: Byte,val S$TypeTag: Byte,t1: Tsp @storage[Long],t2: Tsp @storage[Long],t3: Tsp @storage[Long],s: Ssp @storage[Long]): Tsp @storage[Long] // is a forwarder to the specialized member
    override def overrideMe$JL(val T$TypeTag: Byte,t1: Tsp @storage[Long],t2: Tsp @storage[Long],t3: Tsp @storage[Long],s: Ssp): Tsp @storage[Long] // is a forwarder to the specialized member
    override def overrideMe$LJ(val S$TypeTag: Byte,t1: Tsp,t2: Tsp,t3: Tsp,s: Ssp @storage[Long]): Tsp // is a forwarder to the specialized member
    override def overrideMe(t1: Tsp,t2: Tsp,t3: Tsp,s: Ssp): Tsp           // is a specialized implementation of method overrideMe
  }
[Now checking: minibox-inject]
[Now checking: minibox-bridge]
[Not checkable: minibox-coerce]
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile {
  class Base41[T, S] extends Object {
    def <init>(): miniboxing.tests.compile.Base41[T,S] = {
      Base41.super.<init>();
      ()
    };
    def overrideMe(t1: T, t2: T, t3: T, s: S): T = t1
  };
  abstract trait Base42[@miniboxed T, S] extends miniboxing.tests.compile.Base41[T,S] {
    override def overrideMe(t1: T, t2: T, t3: T, s: S): T;
    override def overrideMe$J(T$TypeTag: Byte, t1: Long, t2: Long, t3: Long, s: S): Long
  };
  class Base42$J[Tsp, Ssp] extends miniboxing.tests.compile.Base41[Tsp,Ssp] with miniboxing.tests.compile.Base42[Tsp,Ssp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|Base42$J|T$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|Base42$J|T$TypeTag: Byte): miniboxing.tests.compile.Base42$J[Tsp,Ssp] = {
      Base42$J.super.<init>();
      ()
    };
    override def overrideMe(t1: Tsp, t2: Tsp, t3: Tsp, s: Ssp): Tsp = MiniboxConversions.this.minibox2box[Tsp](Base42$J.this.overrideMe$J(Base42$J.this.miniboxing|tests|compile|Base42$J|T$TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](t1, Base42$J.this.miniboxing|tests|compile|Base42$J|T$TypeTag), MiniboxConversions.this.box2minibox_tt[Tsp](t2, Base42$J.this.miniboxing|tests|compile|Base42$J|T$TypeTag), MiniboxConversions.this.box2minibox_tt[Tsp](t3, Base42$J.this.miniboxing|tests|compile|Base42$J|T$TypeTag), s), Base42$J.this.miniboxing|tests|compile|Base42$J|T$TypeTag);
    override def overrideMe$J(T$TypeTag: Byte, t1: Long, t2: Long, t3: Long, s: Ssp): Long = t2
  };
  class Base42$L[Tsp, Ssp] extends miniboxing.tests.compile.Base41[Tsp,Ssp] with miniboxing.tests.compile.Base42[Tsp,Ssp] {
    def <init>(): miniboxing.tests.compile.Base42$L[Tsp,Ssp] = {
      Base42$L.super.<init>();
      ()
    };
    override def overrideMe(t1: Tsp, t2: Tsp, t3: Tsp, s: Ssp): Tsp = t2;
    override def overrideMe$J(T$TypeTag: Byte, t1: Long, t2: Long, t3: Long, s: Ssp): Long = MiniboxConversions.this.box2minibox_tt[Tsp](Base42$L.this.overrideMe(MiniboxConversions.this.minibox2box[Tsp](t1, T$TypeTag), MiniboxConversions.this.minibox2box[Tsp](t2, T$TypeTag), MiniboxConversions.this.minibox2box[Tsp](t3, T$TypeTag), s), T$TypeTag)
  };
  abstract trait Base43[@miniboxed T, @miniboxed S] extends miniboxing.tests.compile.Base41[T,S] with miniboxing.tests.compile.Base42[T,S] {
    override def overrideMe(t1: T, t2: T, t3: T, s: S): T;
    override def overrideMe$JJ(T$TypeTag: Byte, S$TypeTag: Byte, t1: Long, t2: Long, t3: Long, s: Long): Long;
    override def overrideMe$JL(T$TypeTag: Byte, t1: Long, t2: Long, t3: Long, s: S): Long;
    override def overrideMe$LJ(S$TypeTag: Byte, t1: T, t2: T, t3: T, s: Long): T
  };
  class Base43$JJ[Tsp, Ssp] extends miniboxing.tests.compile.Base42$J[Tsp,Ssp] with miniboxing.tests.compile.Base43[Tsp,Ssp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|Base43$JJ|S$TypeTag: Byte = _;
    <paramaccessor> private[this] val miniboxing|tests|compile|Base43$JJ|T$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|Base43$JJ|T$TypeTag: Byte, miniboxing|tests|compile|Base43$JJ|S$TypeTag: Byte): miniboxing.tests.compile.Base43$JJ[Tsp,Ssp] = {
      Base43$JJ.super.<init>(miniboxing|tests|compile|Base43$JJ|T$TypeTag);
      ()
    };
    override def overrideMe(t1: Tsp, t2: Tsp, t3: Tsp, s: Ssp): Tsp = MiniboxConversions.this.minibox2box[Tsp](Base43$JJ.this.overrideMe$JJ(Base43$JJ.this.miniboxing|tests|compile|Base43$JJ|T$TypeTag, Base43$JJ.this.miniboxing|tests|compile|Base43$JJ|S$TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](t1, Base43$JJ.this.miniboxing|tests|compile|Base43$JJ|T$TypeTag), MiniboxConversions.this.box2minibox_tt[Tsp](t2, Base43$JJ.this.miniboxing|tests|compile|Base43$JJ|T$TypeTag), MiniboxConversions.this.box2minibox_tt[Tsp](t3, Base43$JJ.this.miniboxing|tests|compile|Base43$JJ|T$TypeTag), MiniboxConversions.this.box2minibox_tt[Ssp](s, Base43$JJ.this.miniboxing|tests|compile|Base43$JJ|S$TypeTag)), Base43$JJ.this.miniboxing|tests|compile|Base43$JJ|T$TypeTag);
    override def overrideMe$JJ(T$TypeTag: Byte, S$TypeTag: Byte, t1: Long, t2: Long, t3: Long, s: Long): Long = t3;
    override def overrideMe$JL(T$TypeTag: Byte, t1: Long, t2: Long, t3: Long, s: Ssp): Long = Base43$JJ.this.overrideMe$JJ(T$TypeTag, Base43$JJ.this.miniboxing|tests|compile|Base43$JJ|S$TypeTag, t1, t2, t3, MiniboxConversions.this.box2minibox_tt[Ssp](s, Base43$JJ.this.miniboxing|tests|compile|Base43$JJ|S$TypeTag));
    override def overrideMe$LJ(S$TypeTag: Byte, t1: Tsp, t2: Tsp, t3: Tsp, s: Long): Tsp = MiniboxConversions.this.minibox2box[Tsp](Base43$JJ.this.overrideMe$JJ(Base43$JJ.this.miniboxing|tests|compile|Base43$JJ|T$TypeTag, S$TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](t1, Base43$JJ.this.miniboxing|tests|compile|Base43$JJ|T$TypeTag), MiniboxConversions.this.box2minibox_tt[Tsp](t2, Base43$JJ.this.miniboxing|tests|compile|Base43$JJ|T$TypeTag), MiniboxConversions.this.box2minibox_tt[Tsp](t3, Base43$JJ.this.miniboxing|tests|compile|Base43$JJ|T$TypeTag), s), Base43$JJ.this.miniboxing|tests|compile|Base43$JJ|T$TypeTag)
  };
  class Base43$JL[Tsp, Ssp] extends miniboxing.tests.compile.Base42$J[Tsp,Ssp] with miniboxing.tests.compile.Base43[Tsp,Ssp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|Base43$JL|T$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|Base43$JL|T$TypeTag: Byte): miniboxing.tests.compile.Base43$JL[Tsp,Ssp] = {
      Base43$JL.super.<init>(miniboxing|tests|compile|Base43$JL|T$TypeTag);
      ()
    };
    override def overrideMe(t1: Tsp, t2: Tsp, t3: Tsp, s: Ssp): Tsp = MiniboxConversions.this.minibox2box[Tsp](Base43$JL.this.overrideMe$JL(Base43$JL.this.miniboxing|tests|compile|Base43$JL|T$TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](t1, Base43$JL.this.miniboxing|tests|compile|Base43$JL|T$TypeTag), MiniboxConversions.this.box2minibox_tt[Tsp](t2, Base43$JL.this.miniboxing|tests|compile|Base43$JL|T$TypeTag), MiniboxConversions.this.box2minibox_tt[Tsp](t3, Base43$JL.this.miniboxing|tests|compile|Base43$JL|T$TypeTag), s), Base43$JL.this.miniboxing|tests|compile|Base43$JL|T$TypeTag);
    override def overrideMe$JJ(T$TypeTag: Byte, S$TypeTag: Byte, t1: Long, t2: Long, t3: Long, s: Long): Long = Base43$JL.this.overrideMe$JL(T$TypeTag, t1, t2, t3, MiniboxConversions.this.minibox2box[Ssp](s, S$TypeTag));
    override def overrideMe$JL(T$TypeTag: Byte, t1: Long, t2: Long, t3: Long, s: Ssp): Long = t3;
    override def overrideMe$LJ(S$TypeTag: Byte, t1: Tsp, t2: Tsp, t3: Tsp, s: Long): Tsp = MiniboxConversions.this.minibox2box[Tsp](Base43$JL.this.overrideMe$JL(Base43$JL.this.miniboxing|tests|compile|Base43$JL|T$TypeTag, MiniboxConversions.this.box2minibox_tt[Tsp](t1, Base43$JL.this.miniboxing|tests|compile|Base43$JL|T$TypeTag), MiniboxConversions.this.box2minibox_tt[Tsp](t2, Base43$JL.this.miniboxing|tests|compile|Base43$JL|T$TypeTag), MiniboxConversions.this.box2minibox_tt[Tsp](t3, Base43$JL.this.miniboxing|tests|compile|Base43$JL|T$TypeTag), MiniboxConversions.this.minibox2box[Ssp](s, S$TypeTag)), Base43$JL.this.miniboxing|tests|compile|Base43$JL|T$TypeTag)
  };
  class Base43$LJ[Tsp, Ssp] extends miniboxing.tests.compile.Base42$L[Tsp,Ssp] with miniboxing.tests.compile.Base43[Tsp,Ssp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|Base43$LJ|S$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|Base43$LJ|S$TypeTag: Byte): miniboxing.tests.compile.Base43$LJ[Tsp,Ssp] = {
      Base43$LJ.super.<init>();
      ()
    };
    override def overrideMe(t1: Tsp, t2: Tsp, t3: Tsp, s: Ssp): Tsp = Base43$LJ.this.overrideMe$LJ(Base43$LJ.this.miniboxing|tests|compile|Base43$LJ|S$TypeTag, t1, t2, t3, MiniboxConversions.this.box2minibox_tt[Ssp](s, Base43$LJ.this.miniboxing|tests|compile|Base43$LJ|S$TypeTag));
    override def overrideMe$JJ(T$TypeTag: Byte, S$TypeTag: Byte, t1: Long, t2: Long, t3: Long, s: Long): Long = MiniboxConversions.this.box2minibox_tt[Tsp](Base43$LJ.this.overrideMe$LJ(S$TypeTag, MiniboxConversions.this.minibox2box[Tsp](t1, T$TypeTag), MiniboxConversions.this.minibox2box[Tsp](t2, T$TypeTag), MiniboxConversions.this.minibox2box[Tsp](t3, T$TypeTag), s), T$TypeTag);
    override def overrideMe$JL(T$TypeTag: Byte, t1: Long, t2: Long, t3: Long, s: Ssp): Long = MiniboxConversions.this.box2minibox_tt[Tsp](Base43$LJ.this.overrideMe$LJ(Base43$LJ.this.miniboxing|tests|compile|Base43$LJ|S$TypeTag, MiniboxConversions.this.minibox2box[Tsp](t1, T$TypeTag), MiniboxConversions.this.minibox2box[Tsp](t2, T$TypeTag), MiniboxConversions.this.minibox2box[Tsp](t3, T$TypeTag), MiniboxConversions.this.box2minibox_tt[Ssp](s, Base43$LJ.this.miniboxing|tests|compile|Base43$LJ|S$TypeTag)), T$TypeTag);
    override def overrideMe$LJ(S$TypeTag: Byte, t1: Tsp, t2: Tsp, t3: Tsp, s: Long): Tsp = t3
  };
  class Base43$LL[Tsp, Ssp] extends miniboxing.tests.compile.Base42$L[Tsp,Ssp] with miniboxing.tests.compile.Base43[Tsp,Ssp] {
    def <init>(): miniboxing.tests.compile.Base43$LL[Tsp,Ssp] = {
      Base43$LL.super.<init>();
      ()
    };
    override def overrideMe(t1: Tsp, t2: Tsp, t3: Tsp, s: Ssp): Tsp = t3;
    override def overrideMe$JJ(T$TypeTag: Byte, S$TypeTag: Byte, t1: Long, t2: Long, t3: Long, s: Long): Long = MiniboxConversions.this.box2minibox_tt[Tsp](Base43$LL.this.overrideMe(MiniboxConversions.this.minibox2box[Tsp](t1, T$TypeTag), MiniboxConversions.this.minibox2box[Tsp](t2, T$TypeTag), MiniboxConversions.this.minibox2box[Tsp](t3, T$TypeTag), MiniboxConversions.this.minibox2box[Ssp](s, S$TypeTag)), T$TypeTag);
    override def overrideMe$JL(T$TypeTag: Byte, t1: Long, t2: Long, t3: Long, s: Ssp): Long = MiniboxConversions.this.box2minibox_tt[Tsp](Base43$LL.this.overrideMe(MiniboxConversions.this.minibox2box[Tsp](t1, T$TypeTag), MiniboxConversions.this.minibox2box[Tsp](t2, T$TypeTag), MiniboxConversions.this.minibox2box[Tsp](t3, T$TypeTag), s), T$TypeTag);
    override def overrideMe$LJ(S$TypeTag: Byte, t1: Tsp, t2: Tsp, t3: Tsp, s: Long): Tsp = Base43$LL.this.overrideMe(t1, t2, t3, MiniboxConversions.this.minibox2box[Ssp](s, S$TypeTag))
  }
}
[Now checking: minibox-commit]