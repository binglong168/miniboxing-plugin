Miniboxing plugin warning: Optimizing `MbArray`s, tuples and functions can only be done if you allow the plugin to use both long and double encodings (remove the `P:minibox:Yone-way` compiler option). In this run, the above classes will be generic and will box.
Specializing trait Dist...
  // interface:
  abstract trait Dist[A] extends Object {
    def sample$J[CC[A] <: Iterable[A]](val A$TypeTag: Byte,n: Int,implicit a: A @storage[Long],implicit cbf: scala.collection.generic.CanBuildFrom[CC[A],A,CC[A]]): CC[A]
    def sample[CC[A] <: Iterable[A]](n: Int,implicit a: A,implicit cbf: scala.collection.generic.CanBuildFrom[CC[A],A,CC[A]]): CC[A]
  }
  // specialized class:
  abstract trait Dist$J[Asp] extends Dist[Asp] {
    def miniboxing|tests|compile|Dist$J|A$TypeTag(): Byte                  // is a type tag
    def sample$J[CC[A] <: Iterable[A]](val A$TypeTag: Byte,n: Int,implicit a: Asp @storage[Long],implicit cbf: scala.collection.generic.CanBuildFrom[CC[Asp],Asp,CC[Asp]]): CC[Asp] // is a specialized implementation of method sample
    def sample[CC[A] <: Iterable[A]](n: Int,implicit a: Asp,implicit cbf: scala.collection.generic.CanBuildFrom[CC[Asp],Asp,CC[Asp]]): CC[Asp] // is a forwarder to the specialized member
  }
  // specialized class:
  abstract trait Dist$L[Asp] extends Dist[Asp] {
    def sample$J[CC[A] <: Iterable[A]](val A$TypeTag: Byte,n: Int,implicit a: Asp @storage[Long],implicit cbf: scala.collection.generic.CanBuildFrom[CC[Asp],Asp,CC[Asp]]): CC[Asp] // is a forwarder to the specialized member
    def sample[CC[A] <: Iterable[A]](n: Int,implicit a: Asp,implicit cbf: scala.collection.generic.CanBuildFrom[CC[Asp],Asp,CC[Asp]]): CC[Asp] // is a specialized implementation of method sample
  }
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile {
  abstract trait Dist[@miniboxed A] extends Object { self: miniboxing.tests.compile.Dist[A] =>
    def sample[CC[A] >: [A]Nothing <: [A]Iterable[A]](n: Int, a: A, cbf: scala.collection.generic.CanBuildFrom[CC[A],A,CC[A]]): CC[A];
    def sample$J[CC[A] >: [A]Nothing <: [A]Iterable[A]](A$TypeTag: Byte, n: Int, a: Long, cbf: scala.collection.generic.CanBuildFrom[CC[A],A,CC[A]]): CC[A]
  };
  abstract trait Dist$J[Asp] extends Object with miniboxing.tests.compile.Dist[Asp] {
    def miniboxing|tests|compile|Dist$J|A$TypeTag(): Byte;
    def sample[CC[A] >: [A]Nothing <: [A]Iterable[A]](n: Int, a: Asp, cbf: scala.collection.generic.CanBuildFrom[CC[Asp],Asp,CC[Asp]]): CC[Asp] = Dist$J.this.sample$J[CC](Dist$J.this.miniboxing|tests|compile|Dist$J|A$TypeTag(), n, MiniboxConversions.this.box2minibox_tt[Asp](a, Dist$J.this.miniboxing|tests|compile|Dist$J|A$TypeTag()), cbf);
    def sample$J[CC[A] >: [A]Nothing <: [A]Iterable[A]](A$TypeTag: Byte, n: Int, a: Long, cbf: scala.collection.generic.CanBuildFrom[CC[Asp],Asp,CC[Asp]]): CC[Asp] = cbf.apply().result()
  };
  abstract trait Dist$L[Asp] extends Object with miniboxing.tests.compile.Dist[Asp] {
    def sample[CC[A] >: [A]Nothing <: [A]Iterable[A]](n: Int, a: Asp, cbf: scala.collection.generic.CanBuildFrom[CC[Asp],Asp,CC[Asp]]): CC[Asp] = cbf.apply().result();
    def sample$J[CC[A] >: [A]Nothing <: [A]Iterable[A]](A$TypeTag: Byte, n: Int, a: Long, cbf: scala.collection.generic.CanBuildFrom[CC[Asp],Asp,CC[Asp]]): CC[Asp] = Dist$L.this.sample[CC](n, MiniboxConversions.this.minibox2box[Asp](a, A$TypeTag), cbf)
  }
}