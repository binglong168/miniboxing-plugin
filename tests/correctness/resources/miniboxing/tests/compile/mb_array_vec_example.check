[[syntax trees at end of            minibox-commit]] // newSource1.scala
package respec {
  abstract trait Vec[@miniboxed T] extends Object {
    def size(): Int;
    def apply(i: Int): T;
    def apply$D(T$TypeTag: Byte, i: Int): Double;
    def apply$J(T$TypeTag: Byte, i: Int): Long;
    @miniboxing.internal.nobridge def map[@miniboxed B](f: miniboxing.internal.MiniboxedFunction1[T,B]): respec.Vec[B];
    @miniboxing.internal.nobridge def map$n$D[B](B$TypeTag: Byte, f: miniboxing.internal.MiniboxedFunction1[T,B]): respec.Vec[B];
    @miniboxing.internal.nobridge def map$n$J[B](B$TypeTag: Byte, f: miniboxing.internal.MiniboxedFunction1[T,B]): respec.Vec[B]
  };
  final class Vec$D[Tsp] extends Object with respec.Vec[Tsp] {
    <paramaccessor> private[this] val respec|Vec$D|T$TypeTag: Byte = _;
    <paramaccessor> private[this] val elems: MbArray[Tsp] = _;
    def <init>(respec|Vec$D|T$TypeTag: Byte, elems: MbArray[Tsp]): respec.Vec$D[Tsp] = {
      Vec$D.super.<init>();
      ()
    };
    def size(): Int = Vec$D.this.elems.length();
    def apply(i: Int): Tsp = MiniboxConversionsDouble.this.minibox2box[Tsp](Vec$D.this.apply$D(Vec$D.this.respec|Vec$D|T$TypeTag, i), Vec$D.this.respec|Vec$D|T$TypeTag);
    def apply$D(T$TypeTag: Byte, i: Int): Double = MbArrayOpts.this.mbArray_apply_D[Tsp](Vec$D.this.elems, i, T$TypeTag);
    def apply$J(T$TypeTag: Byte, i: Int): Long = MiniboxConversions.this.unreachableConversion[Nothing]("Double", "Long");
    @miniboxing.internal.nobridge def map[@miniboxed B](f: miniboxing.internal.MiniboxedFunction1[Tsp,B]): respec.Vec[B] = {
      val a: MbArray[B] = scala.MbArray.empty[B](Vec$D.this.elems.length());
      var i: Int = 0;
      while$1(){
        if (i.<(Vec$D.this.elems.length()))
          {
            {
              a.update(i, f.apply$DL(Vec$D.this.respec|Vec$D|T$TypeTag, MbArrayOpts.this.mbArray_apply_D[Tsp](Vec$D.this.elems, i, Vec$D.this.respec|Vec$D|T$TypeTag)));
              i = i.+(1)
            };
            while$1()
          }
        else
          ()
      };
      new respec.Vec$L[B](a)
    };
    @miniboxing.internal.nobridge def map$n$D[B](B$TypeTag: Byte, f: miniboxing.internal.MiniboxedFunction1[Tsp,B]): respec.Vec[B] = {
      val a: MbArray[B] = MbArrayOpts.this.mbArray_empty_D[B](Vec$D.this.elems.length(), B$TypeTag);
      var i: Int = 0;
      while$1(){
        if (i.<(Vec$D.this.elems.length()))
          {
            {
              MbArrayOpts.this.mbArray_update_D[B](a, i, f.apply$DD(Vec$D.this.respec|Vec$D|T$TypeTag, B$TypeTag, MbArrayOpts.this.mbArray_apply_D[Tsp](Vec$D.this.elems, i, Vec$D.this.respec|Vec$D|T$TypeTag)), B$TypeTag);
              i = i.+(1)
            };
            while$1()
          }
        else
          ()
      };
      new respec.Vec$D[B](B$TypeTag, a)
    };
    @miniboxing.internal.nobridge def map$n$J[B](B$TypeTag: Byte, f: miniboxing.internal.MiniboxedFunction1[Tsp,B]): respec.Vec[B] = {
      val a: MbArray[B] = MbArrayOpts.this.mbArray_empty_J[B](Vec$D.this.elems.length(), B$TypeTag);
      var i: Int = 0;
      while$1(){
        if (i.<(Vec$D.this.elems.length()))
          {
            {
              MbArrayOpts.this.mbArray_update_J[B](a, i, f.apply$DJ(Vec$D.this.respec|Vec$D|T$TypeTag, B$TypeTag, MbArrayOpts.this.mbArray_apply_D[Tsp](Vec$D.this.elems, i, Vec$D.this.respec|Vec$D|T$TypeTag)), B$TypeTag);
              i = i.+(1)
            };
            while$1()
          }
        else
          ()
      };
      new respec.Vec$J[B](B$TypeTag, a)
    }
  };
  final class Vec$J[Tsp] extends Object with respec.Vec[Tsp] {
    <paramaccessor> private[this] val respec|Vec$J|T$TypeTag: Byte = _;
    <paramaccessor> private[this] val elems: MbArray[Tsp] = _;
    def <init>(respec|Vec$J|T$TypeTag: Byte, elems: MbArray[Tsp]): respec.Vec$J[Tsp] = {
      Vec$J.super.<init>();
      ()
    };
    def size(): Int = Vec$J.this.elems.length();
    def apply(i: Int): Tsp = MiniboxConversionsLong.this.minibox2box[Tsp](Vec$J.this.apply$J(Vec$J.this.respec|Vec$J|T$TypeTag, i), Vec$J.this.respec|Vec$J|T$TypeTag);
    def apply$D(T$TypeTag: Byte, i: Int): Double = MiniboxConversions.this.unreachableConversion[Nothing]("Long", "Double");
    def apply$J(T$TypeTag: Byte, i: Int): Long = MbArrayOpts.this.mbArray_apply_J[Tsp](Vec$J.this.elems, i, T$TypeTag);
    @miniboxing.internal.nobridge def map[@miniboxed B](f: miniboxing.internal.MiniboxedFunction1[Tsp,B]): respec.Vec[B] = {
      val a: MbArray[B] = scala.MbArray.empty[B](Vec$J.this.elems.length());
      var i: Int = 0;
      while$1(){
        if (i.<(Vec$J.this.elems.length()))
          {
            {
              a.update(i, f.apply$JL(Vec$J.this.respec|Vec$J|T$TypeTag, MbArrayOpts.this.mbArray_apply_J[Tsp](Vec$J.this.elems, i, Vec$J.this.respec|Vec$J|T$TypeTag)));
              i = i.+(1)
            };
            while$1()
          }
        else
          ()
      };
      new respec.Vec$L[B](a)
    };
    @miniboxing.internal.nobridge def map$n$D[B](B$TypeTag: Byte, f: miniboxing.internal.MiniboxedFunction1[Tsp,B]): respec.Vec[B] = {
      val a: MbArray[B] = MbArrayOpts.this.mbArray_empty_D[B](Vec$J.this.elems.length(), B$TypeTag);
      var i: Int = 0;
      while$1(){
        if (i.<(Vec$J.this.elems.length()))
          {
            {
              MbArrayOpts.this.mbArray_update_D[B](a, i, f.apply$JD(Vec$J.this.respec|Vec$J|T$TypeTag, B$TypeTag, MbArrayOpts.this.mbArray_apply_J[Tsp](Vec$J.this.elems, i, Vec$J.this.respec|Vec$J|T$TypeTag)), B$TypeTag);
              i = i.+(1)
            };
            while$1()
          }
        else
          ()
      };
      new respec.Vec$D[B](B$TypeTag, a)
    };
    @miniboxing.internal.nobridge def map$n$J[B](B$TypeTag: Byte, f: miniboxing.internal.MiniboxedFunction1[Tsp,B]): respec.Vec[B] = {
      val a: MbArray[B] = MbArrayOpts.this.mbArray_empty_J[B](Vec$J.this.elems.length(), B$TypeTag);
      var i: Int = 0;
      while$1(){
        if (i.<(Vec$J.this.elems.length()))
          {
            {
              MbArrayOpts.this.mbArray_update_J[B](a, i, f.apply$JJ(Vec$J.this.respec|Vec$J|T$TypeTag, B$TypeTag, MbArrayOpts.this.mbArray_apply_J[Tsp](Vec$J.this.elems, i, Vec$J.this.respec|Vec$J|T$TypeTag)), B$TypeTag);
              i = i.+(1)
            };
            while$1()
          }
        else
          ()
      };
      new respec.Vec$J[B](B$TypeTag, a)
    }
  };
  final class Vec$L[Tsp] extends Object with respec.Vec[Tsp] {
    <paramaccessor> private[this] val elems: MbArray[Tsp] = _;
    def <init>(elems: MbArray[Tsp]): respec.Vec$L[Tsp] = {
      Vec$L.super.<init>();
      ()
    };
    def size(): Int = Vec$L.this.elems.length();
    def apply(i: Int): Tsp = Vec$L.this.elems.apply(i);
    def apply$D(T$TypeTag: Byte, i: Int): Double = MiniboxConversionsDouble.this.box2minibox_tt[Tsp](Vec$L.this.apply(i), T$TypeTag);
    def apply$J(T$TypeTag: Byte, i: Int): Long = MiniboxConversionsLong.this.box2minibox_tt[Tsp](Vec$L.this.apply(i), T$TypeTag);
    @miniboxing.internal.nobridge def map[@miniboxed B](f: miniboxing.internal.MiniboxedFunction1[Tsp,B]): respec.Vec[B] = {
      val a: MbArray[B] = scala.MbArray.empty[B](Vec$L.this.elems.length());
      var i: Int = 0;
      while$1(){
        if (i.<(Vec$L.this.elems.length()))
          {
            {
              a.update(i, f.apply(Vec$L.this.elems.apply(i)));
              i = i.+(1)
            };
            while$1()
          }
        else
          ()
      };
      new respec.Vec$L[B](a)
    };
    @miniboxing.internal.nobridge def map$n$D[B](B$TypeTag: Byte, f: miniboxing.internal.MiniboxedFunction1[Tsp,B]): respec.Vec[B] = {
      val a: MbArray[B] = MbArrayOpts.this.mbArray_empty_D[B](Vec$L.this.elems.length(), B$TypeTag);
      var i: Int = 0;
      while$1(){
        if (i.<(Vec$L.this.elems.length()))
          {
            {
              MbArrayOpts.this.mbArray_update_D[B](a, i, f.apply$LD(B$TypeTag, Vec$L.this.elems.apply(i)), B$TypeTag);
              i = i.+(1)
            };
            while$1()
          }
        else
          ()
      };
      new respec.Vec$D[B](B$TypeTag, a)
    };
    @miniboxing.internal.nobridge def map$n$J[B](B$TypeTag: Byte, f: miniboxing.internal.MiniboxedFunction1[Tsp,B]): respec.Vec[B] = {
      val a: MbArray[B] = MbArrayOpts.this.mbArray_empty_J[B](Vec$L.this.elems.length(), B$TypeTag);
      var i: Int = 0;
      while$1(){
        if (i.<(Vec$L.this.elems.length()))
          {
            {
              MbArrayOpts.this.mbArray_update_J[B](a, i, f.apply$LJ(B$TypeTag, Vec$L.this.elems.apply(i)), B$TypeTag);
              i = i.+(1)
            };
            while$1()
          }
        else
          ()
      };
      new respec.Vec$J[B](B$TypeTag, a)
    }
  };
  object Vec extends Object {
    def <init>(): respec.Vec.type = {
      Vec.super.<init>();
      ()
    };
    def apply[@miniboxed A](elems: Array[A]): respec.Vec[A] = new respec.Vec$L[A](scala.MbArray.clone[A](elems));
    def apply$n$D[A](A$TypeTag: Byte, elems: Array[A]): respec.Vec[A] = new respec.Vec$D[A](A$TypeTag, MbArrayOpts.this.mbArray_clone_D[A](elems, A$TypeTag));
    def apply$n$J[A](A$TypeTag: Byte, elems: Array[A]): respec.Vec[A] = new respec.Vec$J[A](A$TypeTag, MbArrayOpts.this.mbArray_clone_J[A](elems, A$TypeTag))
  };
  object Test extends Object with App {
    def <init>(): respec.Test.type = {
      Test.super.<init>();
      ()
    };
    private[this] val size: Int = 1;
    <stable> <accessor> def size(): Int = Test.this.size;
    private[this] val rng: scala.util.Random = new scala.util.Random(42);
    <stable> <accessor> def rng(): scala.util.Random = Test.this.rng;
    private[this] val doubleData: Array[Double] = new Array[Double](Test.this.size());
    <stable> <accessor> def doubleData(): Array[Double] = Test.this.doubleData;
    private[this] val doubleVec: respec.Vec[Double] = Vec.apply$n$D[Double](8, Test.this.doubleData());
    <stable> <accessor> def doubleVec(): respec.Vec[Double] = Test.this.doubleVec;
    scala.this.Predef.println("benchmark");
    Test.this.doubleVec().map$n$D[Double](8, {
      @SerialVersionUID(0) final <synthetic> class $anonfun extends miniboxing.internal.AbstractMiniboxedFunction1$DD[Double,Double] with Serializable {
        def <init>(): anonymous class $anon = {
          $anonfun.super.<init>(8, 8);
          ()
        };
        final def apply(x: Double): Double = x.*(x);
        override def apply$DD(T1$TypeTag: Byte, R$TypeTag: Byte, t1: Double): Double = MiniboxConversionsDouble.this.double2minibox(MiniboxConversionsDouble.this.minibox2double(t1).*(MiniboxConversionsDouble.this.minibox2double(t1)))
      };
      new anonymous class $anon()
    })
  }
}
benchmark