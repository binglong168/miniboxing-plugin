Miniboxing plugin warning: Optimizing `MbArray`s, tuples and functions can only be done if you allow the plugin to use both long and double encodings (remove the `P:minibox:Yone-way` compiler option). In this run, the above classes will be generic and will box.
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile.bug53 {
  object Test3 extends Object {
    def <init>(): miniboxing.tests.compile.bug53.Test3.type = {
      Test3.super.<init>();
      ()
    };
    abstract trait BUG53outer[@miniboxed T] extends Object {
      abstract trait BUG53inner[@miniboxed T] extends Object;
      class BUG53inner$J[Tsp] extends Object with BUG53outer.this.BUG53inner[Tsp] {
        <paramaccessor> private[this] val miniboxing|tests|compile|bug53|Test3|BUG53outer|BUG53inner$J|T$TypeTag: Byte = _;
        def <init>(miniboxing|tests|compile|bug53|Test3|BUG53outer|BUG53inner$J|T$TypeTag: Byte): BUG53outer.this.BUG53inner$J[Tsp] = {
          BUG53inner$J.super.<init>();
          ()
        }
      };
      class BUG53inner$L[Tsp] extends Object with BUG53outer.this.BUG53inner[Tsp] {
        def <init>(): BUG53outer.this.BUG53inner$L[Tsp] = {
          BUG53inner$L.super.<init>();
          ()
        }
      }
    };
    class BUG53outer$J[Tsp] extends Object with miniboxing.tests.compile.bug53.Test3.BUG53outer[Tsp] {
      <paramaccessor> private[this] val miniboxing|tests|compile|bug53|Test3|BUG53outer$J|T$TypeTag: Byte = _;
      def <init>(miniboxing|tests|compile|bug53|Test3|BUG53outer$J|T$TypeTag: Byte): miniboxing.tests.compile.bug53.Test3.BUG53outer$J[Tsp] = {
        BUG53outer$J.super.<init>();
        ()
      }
    };
    class BUG53outer$L[Tsp] extends Object with miniboxing.tests.compile.bug53.Test3.BUG53outer[Tsp] {
      def <init>(): miniboxing.tests.compile.bug53.Test3.BUG53outer$L[Tsp] = {
        BUG53outer$L.super.<init>();
        ()
      }
    }
  }
}