Miniboxing plugin warning: Optimizing `MbArray`s, tuples and functions can only be done if you allow the plugin to use both long and double encodings (remove the `P:minibox:Yone-way` compiler option). In this run, the above classes will be generic and will box.
[[syntax trees at end of            minibox-inject]] // newSource1.scala
package miniboxing.tests.compile.nested_rewiring.test2 {
  abstract trait C[@miniboxed T, @miniboxed U] extends Object;
  class C$JJ[Tsp, Usp] extends Object with miniboxing.tests.compile.nested_rewiring.test2.C[Tsp,Usp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|nested_rewiring|test2|C$JJ|T$TypeTag: Byte = _;
    <paramaccessor> private[this] val miniboxing|tests|compile|nested_rewiring|test2|C$JJ|U$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|nested_rewiring|test2|C$JJ|T$TypeTag: Byte, miniboxing|tests|compile|nested_rewiring|test2|C$JJ|U$TypeTag: Byte): miniboxing.tests.compile.nested_rewiring.test2.C$JJ[Tsp,Usp] = {
      C$JJ.super.<init>();
      ()
    }
  };
  class C$JL[Tsp, Usp] extends Object with miniboxing.tests.compile.nested_rewiring.test2.C[Tsp,Usp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|nested_rewiring|test2|C$JL|T$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|nested_rewiring|test2|C$JL|T$TypeTag: Byte): miniboxing.tests.compile.nested_rewiring.test2.C$JL[Tsp,Usp] = {
      C$JL.super.<init>();
      ()
    }
  };
  class C$LJ[Tsp, Usp] extends Object with miniboxing.tests.compile.nested_rewiring.test2.C[Tsp,Usp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|nested_rewiring|test2|C$LJ|U$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|nested_rewiring|test2|C$LJ|U$TypeTag: Byte): miniboxing.tests.compile.nested_rewiring.test2.C$LJ[Tsp,Usp] = {
      C$LJ.super.<init>();
      ()
    }
  };
  class C$LL[Tsp, Usp] extends Object with miniboxing.tests.compile.nested_rewiring.test2.C[Tsp,Usp] {
    def <init>(): miniboxing.tests.compile.nested_rewiring.test2.C$LL[Tsp,Usp] = {
      C$LL.super.<init>();
      ()
    }
  };
  abstract trait D[@miniboxed S] extends Object {
    def bar[@miniboxed T](): Nothing;
    def bar$n$J[T](T$TypeTag: Byte): Nothing
  };
  class D$J[Ssp] extends Object with miniboxing.tests.compile.nested_rewiring.test2.D[Ssp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|nested_rewiring|test2|D$J|S$TypeTag: Byte = _;
    def <init>(miniboxing|tests|compile|nested_rewiring|test2|D$J|S$TypeTag: Byte): miniboxing.tests.compile.nested_rewiring.test2.D$J[Ssp] = {
      D$J.super.<init>();
      ()
    };
    def bar[@miniboxed T](): Nothing = {
      class F extends Object {
        def <init>(): F = {
          F.super.<init>();
          ()
        };
        class Z extends miniboxing.tests.compile.nested_rewiring.test2.C$JL[Ssp,T] {
          def <init>(): F.this.Z = {
            Z.super.<init>(D$J.this.miniboxing|tests|compile|nested_rewiring|test2|D$J|S$TypeTag);
            ()
          }
        }
      };
      scala.this.Predef.???()
    };
    def bar$n$J[T](T$TypeTag: Byte): Nothing = {
      class F extends Object {
        def <init>(): F = {
          F.super.<init>();
          ()
        };
        class Z extends miniboxing.tests.compile.nested_rewiring.test2.C$JJ[Ssp,T] {
          def <init>(): F.this.Z = {
            Z.super.<init>(D$J.this.miniboxing|tests|compile|nested_rewiring|test2|D$J|S$TypeTag, T$TypeTag);
            ()
          }
        }
      };
      scala.this.Predef.???()
    }
  };
  class D$L[Ssp] extends Object with miniboxing.tests.compile.nested_rewiring.test2.D[Ssp] {
    def <init>(): miniboxing.tests.compile.nested_rewiring.test2.D$L[Ssp] = {
      D$L.super.<init>();
      ()
    };
    def bar[@miniboxed T](): Nothing = {
      class F extends Object {
        def <init>(): F = {
          F.super.<init>();
          ()
        };
        class Z extends miniboxing.tests.compile.nested_rewiring.test2.C$LL[Ssp,T] {
          def <init>(): F.this.Z = {
            Z.super.<init>();
            ()
          }
        }
      };
      scala.this.Predef.???()
    };
    def bar$n$J[T](T$TypeTag: Byte): Nothing = {
      class F extends Object {
        def <init>(): F = {
          F.super.<init>();
          ()
        };
        class Z extends miniboxing.tests.compile.nested_rewiring.test2.C$LJ[Ssp,T] {
          def <init>(): F.this.Z = {
            Z.super.<init>(T$TypeTag);
            ()
          }
        }
      };
      scala.this.Predef.???()
    }
  }
}