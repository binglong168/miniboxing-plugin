Miniboxing plugin warning: Optimizing `MbArray`s, tuples and functions can only be done if you allow the plugin to use both long and double encodings (remove the `P:minibox:Yone-way` compiler option). In this run, the above classes will be generic and will box.
[[syntax trees at end of            minibox-inject]] // newSource1.scala
package miniboxing.tests.correctness.erasure.torture1 {
  abstract trait A[@miniboxed T] extends Object {
    <stable> <accessor> <paramaccessor> def a(): T;
    <stable> <accessor> def a$J(T$TypeTag: Byte): T @storage[Long];
    <stable> <accessor> <paramaccessor> def b(): T;
    <stable> <accessor> def b$J(T$TypeTag: Byte): T @storage[Long];
    def foo(c: Boolean): Any
  };
  class A$J[Tsp] extends Object with miniboxing.tests.correctness.erasure.torture1.A[Tsp] {
    <paramaccessor> private[this] val miniboxing|tests|correctness|erasure|torture1|A$J|T$TypeTag: Byte = _;
    <paramaccessor> private[this] val a: Tsp @storage[Long] = _;
    <stable> <accessor> <paramaccessor> def a(): Tsp = A$J.this.a$J(A$J.this.miniboxing|tests|correctness|erasure|torture1|A$J|T$TypeTag);
    <stable> <accessor> def a$J(T$TypeTag: Byte): Tsp @storage[Long] = A$J.this.a;
    <paramaccessor> private[this] val b: Tsp @storage[Long] = _;
    <stable> <accessor> <paramaccessor> def b(): Tsp = A$J.this.b$J(A$J.this.miniboxing|tests|correctness|erasure|torture1|A$J|T$TypeTag);
    <stable> <accessor> def b$J(T$TypeTag: Byte): Tsp @storage[Long] = A$J.this.b;
    def <init>(miniboxing|tests|correctness|erasure|torture1|A$J|T$TypeTag: Byte, a: Tsp @storage[Long], b: Tsp @storage[Long]): miniboxing.tests.correctness.erasure.torture1.A$J[Tsp] = {
      A$J.super.<init>();
      ()
    };
    def foo(c: Boolean): Any = {
      val x: Tsp @storage[Long] = if (c)
        A$J.this.a$J(A$J.this.miniboxing|tests|correctness|erasure|torture1|A$J|T$TypeTag)
      else
        A$J.this.b$J(A$J.this.miniboxing|tests|correctness|erasure|torture1|A$J|T$TypeTag);
      val y: List[Tsp] = {
        <synthetic> val x$2: Tsp @storage[Long] = A$J.this.a$J(A$J.this.miniboxing|tests|correctness|erasure|torture1|A$J|T$TypeTag);
        {
  <synthetic> val x$1: Tsp @storage[Long] = A$J.this.b$J(A$J.this.miniboxing|tests|correctness|erasure|torture1|A$J|T$TypeTag);
  immutable.this.Nil.::[Tsp](x$1)
}.::[Tsp](x$2)
      };
      if (c)
        A$J.this.a$J(A$J.this.miniboxing|tests|correctness|erasure|torture1|A$J|T$TypeTag)
      else
        y
    }
  };
  class A$L[Tsp] extends Object with miniboxing.tests.correctness.erasure.torture1.A[Tsp] {
    <paramaccessor> private[this] val a: Tsp = _;
    <stable> <accessor> <paramaccessor> def a(): Tsp = A$L.this.a;
    <stable> <accessor> def a$J(T$TypeTag: Byte): Tsp @storage[Long] = A$L.this.a();
    <paramaccessor> private[this] val b: Tsp = _;
    <stable> <accessor> <paramaccessor> def b(): Tsp = A$L.this.b;
    <stable> <accessor> def b$J(T$TypeTag: Byte): Tsp @storage[Long] = A$L.this.b();
    def <init>(a: Tsp, b: Tsp): miniboxing.tests.correctness.erasure.torture1.A$L[Tsp] = {
      A$L.super.<init>();
      ()
    };
    def foo(c: Boolean): Any = {
      val x: Tsp = if (c)
        A$L.this.a()
      else
        A$L.this.b();
      val y: List[Tsp] = {
        <synthetic> val x$2: Tsp = A$L.this.a();
        {
  <synthetic> val x$1: Tsp = A$L.this.b();
  immutable.this.Nil.::[Tsp](x$1)
}.::[Tsp](x$2)
      };
      if (c)
        A$L.this.a()
      else
        y
    }
  }
}
[Now checking: minibox-inject]
[[syntax trees at end of            minibox-bridge]] // newSource1.scala: tree is unchanged since minibox-inject
[Now checking: minibox-bridge]
[[syntax trees at end of            minibox-coerce]] // newSource1.scala
package miniboxing.tests.correctness.erasure.torture1 {
  abstract trait A[@miniboxed T] extends Object {
    <stable> <accessor> <paramaccessor> def a(): T;
    <stable> <accessor> def a$J(T$TypeTag: Byte): T @storage[Long];
    <stable> <accessor> <paramaccessor> def b(): T;
    <stable> <accessor> def b$J(T$TypeTag: Byte): T @storage[Long];
    def foo(c: Boolean): Any
  };
  class A$J[Tsp] extends Object with miniboxing.tests.correctness.erasure.torture1.A[Tsp] {
    <paramaccessor> private[this] val miniboxing|tests|correctness|erasure|torture1|A$J|T$TypeTag: Byte = _;
    <paramaccessor> private[this] val a: Tsp @storage[Long] = _;
    <stable> <accessor> <paramaccessor> def a(): Tsp = marker_minibox2box[Tsp, Long](A$J.this.a$J(A$J.this.miniboxing|tests|correctness|erasure|torture1|A$J|T$TypeTag));
    <stable> <accessor> def a$J(T$TypeTag: Byte): Tsp @storage[Long] = A$J.this.a;
    <paramaccessor> private[this] val b: Tsp @storage[Long] = _;
    <stable> <accessor> <paramaccessor> def b(): Tsp = marker_minibox2box[Tsp, Long](A$J.this.b$J(A$J.this.miniboxing|tests|correctness|erasure|torture1|A$J|T$TypeTag));
    <stable> <accessor> def b$J(T$TypeTag: Byte): Tsp @storage[Long] = A$J.this.b;
    def <init>(miniboxing|tests|correctness|erasure|torture1|A$J|T$TypeTag: Byte, a: Tsp @storage[Long], b: Tsp @storage[Long]): miniboxing.tests.correctness.erasure.torture1.A$J[Tsp] = {
      A$J.super.<init>();
      ()
    };
    def foo(c: Boolean): Any = {
      val x: Tsp @storage[Long] = if (c)
        A$J.this.a$J(A$J.this.miniboxing|tests|correctness|erasure|torture1|A$J|T$TypeTag)
      else
        A$J.this.b$J(A$J.this.miniboxing|tests|correctness|erasure|torture1|A$J|T$TypeTag);
      val y: List[Tsp] = {
        <synthetic> val x$2: Tsp @storage[Long] = A$J.this.a$J(A$J.this.miniboxing|tests|correctness|erasure|torture1|A$J|T$TypeTag);
        {
  <synthetic> val x$1: Tsp @storage[Long] = A$J.this.b$J(A$J.this.miniboxing|tests|correctness|erasure|torture1|A$J|T$TypeTag);
  immutable.this.Nil.::[Tsp](marker_minibox2box[Tsp, Long](x$1))
}.::[Tsp](marker_minibox2box[Tsp, Long](x$2))
      };
      if (c)
        marker_minibox2box[Tsp, Long](A$J.this.a$J(A$J.this.miniboxing|tests|correctness|erasure|torture1|A$J|T$TypeTag))
      else
        y
    }
  };
  class A$L[Tsp] extends Object with miniboxing.tests.correctness.erasure.torture1.A[Tsp] {
    <paramaccessor> private[this] val a: Tsp = _;
    <stable> <accessor> <paramaccessor> def a(): Tsp = A$L.this.a;
    <stable> <accessor> def a$J(T$TypeTag: Byte): Tsp @storage[Long] = marker_box2minibox[Tsp, Long](A$L.this.a());
    <paramaccessor> private[this] val b: Tsp = _;
    <stable> <accessor> <paramaccessor> def b(): Tsp = A$L.this.b;
    <stable> <accessor> def b$J(T$TypeTag: Byte): Tsp @storage[Long] = marker_box2minibox[Tsp, Long](A$L.this.b());
    def <init>(a: Tsp, b: Tsp): miniboxing.tests.correctness.erasure.torture1.A$L[Tsp] = {
      A$L.super.<init>();
      ()
    };
    def foo(c: Boolean): Any = {
      val x: Tsp = if (c)
        A$L.this.a()
      else
        A$L.this.b();
      val y: List[Tsp] = {
        <synthetic> val x$2: Tsp = A$L.this.a();
        {
  <synthetic> val x$1: Tsp = A$L.this.b();
  immutable.this.Nil.::[Tsp](x$1)
}.::[Tsp](x$2)
      };
      if (c)
        A$L.this.a()
      else
        y
    }
  }
}
[Not checkable: minibox-coerce]
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.correctness.erasure.torture1 {
  abstract trait A[@miniboxed T] extends Object {
    <stable> <accessor> <paramaccessor> def a(): T;
    <stable> <accessor> def a$J(T$TypeTag: Byte): Long;
    <stable> <accessor> <paramaccessor> def b(): T;
    <stable> <accessor> def b$J(T$TypeTag: Byte): Long;
    def foo(c: Boolean): Any
  };
  class A$J[Tsp] extends Object with miniboxing.tests.correctness.erasure.torture1.A[Tsp] {
    <paramaccessor> private[this] val miniboxing|tests|correctness|erasure|torture1|A$J|T$TypeTag: Byte = _;
    <paramaccessor> private[this] val a: Long = _;
    <stable> <accessor> <paramaccessor> def a(): Tsp = MiniboxConversions.this.minibox2box[Tsp](A$J.this.a$J(A$J.this.miniboxing|tests|correctness|erasure|torture1|A$J|T$TypeTag), A$J.this.miniboxing|tests|correctness|erasure|torture1|A$J|T$TypeTag);
    <stable> <accessor> def a$J(T$TypeTag: Byte): Long = A$J.this.a;
    <paramaccessor> private[this] val b: Long = _;
    <stable> <accessor> <paramaccessor> def b(): Tsp = MiniboxConversions.this.minibox2box[Tsp](A$J.this.b$J(A$J.this.miniboxing|tests|correctness|erasure|torture1|A$J|T$TypeTag), A$J.this.miniboxing|tests|correctness|erasure|torture1|A$J|T$TypeTag);
    <stable> <accessor> def b$J(T$TypeTag: Byte): Long = A$J.this.b;
    def <init>(miniboxing|tests|correctness|erasure|torture1|A$J|T$TypeTag: Byte, a: Long, b: Long): miniboxing.tests.correctness.erasure.torture1.A$J[Tsp] = {
      A$J.super.<init>();
      ()
    };
    def foo(c: Boolean): Any = {
      val x: Long = if (c)
        A$J.this.a$J(A$J.this.miniboxing|tests|correctness|erasure|torture1|A$J|T$TypeTag)
      else
        A$J.this.b$J(A$J.this.miniboxing|tests|correctness|erasure|torture1|A$J|T$TypeTag);
      val y: List[Tsp] = {
        <synthetic> val x$2: Long = A$J.this.a$J(A$J.this.miniboxing|tests|correctness|erasure|torture1|A$J|T$TypeTag);
        {
  <synthetic> val x$1: Long = A$J.this.b$J(A$J.this.miniboxing|tests|correctness|erasure|torture1|A$J|T$TypeTag);
  immutable.this.Nil.::[Tsp](MiniboxConversions.this.minibox2box[Tsp](x$1, A$J.this.miniboxing|tests|correctness|erasure|torture1|A$J|T$TypeTag))
}.::[Tsp](MiniboxConversions.this.minibox2box[Tsp](x$2, A$J.this.miniboxing|tests|correctness|erasure|torture1|A$J|T$TypeTag))
      };
      if (c)
        MiniboxConversions.this.minibox2box[Tsp](A$J.this.a$J(A$J.this.miniboxing|tests|correctness|erasure|torture1|A$J|T$TypeTag), A$J.this.miniboxing|tests|correctness|erasure|torture1|A$J|T$TypeTag)
      else
        y
    }
  };
  class A$L[Tsp] extends Object with miniboxing.tests.correctness.erasure.torture1.A[Tsp] {
    <paramaccessor> private[this] val a: Tsp = _;
    <stable> <accessor> <paramaccessor> def a(): Tsp = A$L.this.a;
    <stable> <accessor> def a$J(T$TypeTag: Byte): Long = MiniboxConversions.this.box2minibox_tt[Tsp](A$L.this.a(), T$TypeTag);
    <paramaccessor> private[this] val b: Tsp = _;
    <stable> <accessor> <paramaccessor> def b(): Tsp = A$L.this.b;
    <stable> <accessor> def b$J(T$TypeTag: Byte): Long = MiniboxConversions.this.box2minibox_tt[Tsp](A$L.this.b(), T$TypeTag);
    def <init>(a: Tsp, b: Tsp): miniboxing.tests.correctness.erasure.torture1.A$L[Tsp] = {
      A$L.super.<init>();
      ()
    };
    def foo(c: Boolean): Any = {
      val x: Tsp = if (c)
        A$L.this.a()
      else
        A$L.this.b();
      val y: List[Tsp] = {
        <synthetic> val x$2: Tsp = A$L.this.a();
        {
  <synthetic> val x$1: Tsp = A$L.this.b();
  immutable.this.Nil.::[Tsp](x$1)
}.::[Tsp](x$2)
      };
      if (c)
        A$L.this.a()
      else
        y
    }
  }
}
[Now checking: minibox-commit]