Miniboxing plugin warning: Optimizing `MbArray`s, tuples and functions can only be done if you allow the plugin to use both long and double encodings (remove the `P:minibox:Yone-way` compiler option). In this run, the above classes will be generic and will box.
Specializing trait Order2...
  // interface:
  abstract trait Order2[A] extends Object {
    def max$J(val A$TypeTag: Byte,x: A @storage[Long],y: A @storage[Long]): A @storage[Long]
    def max(x: A,y: A): A
  }
  // specialized class:
  abstract trait Order2$J[Asp] extends Order2[Asp] {
    def max$J(val A$TypeTag: Byte,x: Asp @storage[Long],y: Asp @storage[Long]): Asp @storage[Long] // is an interface method
    def max(x: Asp,y: Asp): Asp                                            // is a forwarder to the specialized member
    def miniboxing|tests|compile|Order2$J|A$TypeTag(): Byte                // is a type tag
  }
  // specialized class:
  abstract trait Order2$L[Asp] extends Order2[Asp] {
    def max$J(val A$TypeTag: Byte,x: Asp @storage[Long],y: Asp @storage[Long]): Asp @storage[Long] // is a forwarder to the specialized member
    def max(x: Asp,y: Asp): Asp                                            // is an interface method
  }
Specializing class ArrayOps...
  // interface:
  abstract trait ArrayOps[A] extends Object {
    def qmax$J(val A$TypeTag: Byte,ev: miniboxing.tests.compile.Order2[A]): A @storage[Long]
    def qmax(ev: miniboxing.tests.compile.Order2[A]): A
  }
  // specialized class:
  final class ArrayOps$J[Asp] extends ArrayOps[Asp] {
    def <init>(val miniboxing|tests|compile|ArrayOps$J|A$TypeTag: Byte,arr: Array[Asp]): miniboxing.tests.compile.ArrayOps$J[Asp] // is a specialized implementation of constructor ArrayOps
    def qmax$J(val A$TypeTag: Byte,ev: miniboxing.tests.compile.Order2[Asp]): Asp @storage[Long] // is a specialized implementation of method qmax
    def qmax(ev: miniboxing.tests.compile.Order2[Asp]): Asp                // is a forwarder to the specialized member
    private[this] val arr: Array[Asp]                                      // is a specialized implementation of value arr
    private[this] val miniboxing|tests|compile|ArrayOps$J|A$TypeTag: Byte  // is a type tag
  }
  // specialized class:
  final class ArrayOps$L[Asp] extends ArrayOps[Asp] {
    def <init>(arr: Array[Asp]): miniboxing.tests.compile.ArrayOps$L[Asp]  // is a specialized implementation of constructor ArrayOps
    def qmax$J(val A$TypeTag: Byte,ev: miniboxing.tests.compile.Order2[Asp]): Asp @storage[Long] // is a forwarder to the specialized member
    def qmax(ev: miniboxing.tests.compile.Order2[Asp]): Asp                // is a specialized implementation of method qmax
    private[this] val arr: Array[Asp]                                      // is a specialized implementation of value arr
  }
[Now checking: minibox-inject]
[Now checking: minibox-bridge]
[Not checkable: minibox-coerce]
[[syntax trees at end of            minibox-commit]] // newSource1.scala
package miniboxing.tests.compile {
  abstract trait Order2[@miniboxed A] extends Object {
    def max(x: A, y: A): A;
    def max$J(A$TypeTag: Byte, x: Long, y: Long): Long
  };
  abstract trait Order2$J[Asp] extends Object with miniboxing.tests.compile.Order2[Asp] {
    def miniboxing|tests|compile|Order2$J|A$TypeTag(): Byte;
    def max(x: Asp, y: Asp): Asp = MiniboxConversions.this.minibox2box[Asp](Order2$J.this.max$J(Order2$J.this.miniboxing|tests|compile|Order2$J|A$TypeTag(), MiniboxConversions.this.box2minibox_tt[Asp](x, Order2$J.this.miniboxing|tests|compile|Order2$J|A$TypeTag()), MiniboxConversions.this.box2minibox_tt[Asp](y, Order2$J.this.miniboxing|tests|compile|Order2$J|A$TypeTag())), Order2$J.this.miniboxing|tests|compile|Order2$J|A$TypeTag());
    def max$J(A$TypeTag: Byte, x: Long, y: Long): Long
  };
  abstract trait Order2$L[Asp] extends Object with miniboxing.tests.compile.Order2[Asp] {
    def max(x: Asp, y: Asp): Asp;
    def max$J(A$TypeTag: Byte, x: Long, y: Long): Long = MiniboxConversions.this.box2minibox_tt[Asp](Order2$L.this.max(MiniboxConversions.this.minibox2box[Asp](x, A$TypeTag), MiniboxConversions.this.minibox2box[Asp](y, A$TypeTag)), A$TypeTag)
  };
  abstract trait ArrayOps[@miniboxed A] extends Object {
    def qmax(implicit ev: miniboxing.tests.compile.Order2[A]): A;
    def qmax$J(A$TypeTag: Byte, ev: miniboxing.tests.compile.Order2[A]): Long
  };
  final class ArrayOps$J[Asp] extends Object with miniboxing.tests.compile.ArrayOps[Asp] {
    <paramaccessor> private[this] val miniboxing|tests|compile|ArrayOps$J|A$TypeTag: Byte = _;
    <paramaccessor> private[this] val arr: Array[Asp] = _;
    def <init>(miniboxing|tests|compile|ArrayOps$J|A$TypeTag: Byte, arr: Array[Asp]): miniboxing.tests.compile.ArrayOps$J[Asp] = {
      ArrayOps$J.super.<init>();
      ()
    };
    def qmax(ev: miniboxing.tests.compile.Order2[Asp]): Asp = MiniboxConversions.this.minibox2box[Asp](ArrayOps$J.this.qmax$J(ArrayOps$J.this.miniboxing|tests|compile|ArrayOps$J|A$TypeTag, ev), ArrayOps$J.this.miniboxing|tests|compile|ArrayOps$J|A$TypeTag);
    def qmax$J(A$TypeTag: Byte, ev: miniboxing.tests.compile.Order2[Asp]): Long = {
      def f5(t: Long): Long = f5(ev.max$J(A$TypeTag, t, MiniboxArray.this.mbarray_apply_minibox(ArrayOps$J.this.arr, 0, A$TypeTag)));
      f5(MiniboxArray.this.mbarray_apply_minibox(ArrayOps$J.this.arr, 0, A$TypeTag))
    }
  };
  final class ArrayOps$L[Asp] extends Object with miniboxing.tests.compile.ArrayOps[Asp] {
    <paramaccessor> private[this] val arr: Array[Asp] = _;
    def <init>(arr: Array[Asp]): miniboxing.tests.compile.ArrayOps$L[Asp] = {
      ArrayOps$L.super.<init>();
      ()
    };
    def qmax(ev: miniboxing.tests.compile.Order2[Asp]): Asp = {
      def f5(t: Asp): Asp = f5(ev.max(t, ArrayOps$L.this.arr.apply(0)));
      f5(ArrayOps$L.this.arr.apply(0))
    };
    def qmax$J(A$TypeTag: Byte, ev: miniboxing.tests.compile.Order2[Asp]): Long = MiniboxConversions.this.box2minibox_tt[Asp](ArrayOps$L.this.qmax(ev), A$TypeTag)
  }
}
[Now checking: minibox-commit]